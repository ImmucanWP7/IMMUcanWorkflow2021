combined_df <- cbind(abundances_IMC, abundances_IF)
combined_meta <- rbind(meta_IMC, meta_IF)
# DA testing
y.ab <- DGEList(combined_df, samples=combined_meta, group = combined_meta$modality)
# Define the design matrix for the model: Add modality to the model to account for matched design
design <- model.matrix(~sample_id + modality, data = y.ab$samples)
# Estimate NB and QL dispersion
y.ab <- estimateDisp(y.ab, design, trend="none")
summary(y.ab$common.dispersion)
plotBCV(y.ab, cex=1)
fit.ab <- glmQLFit(y.ab, design, robust=TRUE, abundance.trend=FALSE)
summary(fit.ab$var.prior)
summary(fit.ab$df.prior)
plotQLDisp(fit.ab, cex=1)
# Test for differential abundance of cell types
res <- glmQLFTest(fit.ab, coef=ncol(design))
summary(decideTests(res))
DA <- topTags(res)$table
DA$celltype <- rownames(DA)
DA$sign <- DA$FDR<0.05
DA
# Volcano plot
ggplot(DA) + geom_point(aes(logFC, -log10(FDR), color = sign)) +
geom_label_repel(aes(logFC, -log10(FDR), label = celltype)) +
theme_classic()
# MA plot
(p <- ggplot(DA) + geom_abline(intercept = 0, slope = 0, color = "dark red", lwd = 3) +
geom_point(aes(logCPM, logFC), size = 7) +
geom_point(aes(logCPM, logFC, color = sign), size = 5) +
geom_label_repel(aes(logCPM, logFC, label = celltype), size = 7) +
scale_color_manual(values = c("TRUE" = "dark green", "FALSE" = "white"),
name = "Significance") +
ylab(c("log2 Fold Change")) + xlab("log2 CPM") +
ylim(c(-1.5, 1.5)) +
theme_classic(base_size = 25))+
theme(legend.position = "none")
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
mount_path <- "O:/projects/immucan/processed_data/Panel_1/2022_WORKFLOW/"
library(RColorBrewer)
color_vectors <- list()
matched_celltype <- setNames(c("sienna4", "magenta3", "skyblue3", "green3", "grey75", "green4", "#BF0A3D", "#F4800C"),
c("Tumor", "T", "Neutrophil", "MacCD163",
"other", "DC", "B", "BnT"))
celltype <- setNames(c("sienna4", "tan3", "magenta3", "skyblue3", "green3", "grey75", "green4", "#BF0A3D", "#F4800C"),
c("Tumor", "Tumor_CD15", "T", "Neutrophil", "MacCD163",
"other", "DC", "B", "BnT"))
patient_id <- setNames(c("#BE1E2D", "#FF4B5B", "#F7941D", "#FFCA89", "#00A651", "#5FFF73", "#00AEEF", "#9BD7FF", "#2E3192", "#675BFF"),
c("10061074", "10067433", "10068868", "10071582", "10073140", "10074349", "10074832", "10075371", "10075572", "10082495"))
col_vec_indication <- c(CRC = "#5B1C55", SCCHN = "#39BEB4", NSCLC = "#F79C1D",
BCC = "#3F85A7", RCC = "#C81F43")
color_vectors$patient_id <- patient_id
color_vectors$Indication <- col_vec_indication
color_vectors$matched_celltype <- matched_celltype
color_vectors$celltype <- celltype
library(SingleCellExperiment)
library(tidyverse)
cur_files <- list.files(paste0(mount_path,"mIF/data/whole_slide/"),
pattern = "cells_properties_", full.names = TRUE)
cur_files_2 <- list.files(paste0(mount_path,"mIF/data/whole_slide/"),
pattern = "cells_properties2_", full.names = TRUE)
# Map between Lausanne and Zurich IDs
cur_table <- read_csv(paste0(mount_path,"comparisons/sample_mapping.csv"))
# Read in data
cur_sces <- lapply(seq_along(cur_files), function(x){
cur_data <- read.csv(cur_files[x], sep = "\t")
cur_data_2 <- read.csv(cur_files_2[x], sep = "\t")
stopifnot(all.equal(cur_data$cell.ID, cur_data_2$cell.ID))
cur_data <- cbind(cur_data, cur_data_2[,c("cell.area", "TLS.ID")])
cur_counts <- t(cur_data[,grepl("score.normalized", colnames(cur_data))])
cur_raw <- t(cur_data[,grepl("score$", colnames(cur_data))])
stopifnot(all.equal(str_split(rownames(cur_raw), "\\.", simplify = TRUE),
str_split(rownames(cur_counts), "\\.", simplify = TRUE)[,1:2]))
rownames(cur_counts) <- rownames(cur_raw) <- str_split(rownames(cur_raw), "\\.",
simplify = TRUE)[,1]
cur_sce <- SingleCellExperiment(assays = list(counts = cur_counts,
raw = cur_raw))
colData(cur_sce) <- DataFrame(cur_data[,!grepl("score", colnames(cur_data))])
colData(cur_sce)$Lausanne_id <- str_extract(cur_files[x], "IMMU-[A-Z0-9]*-[0-9]{4}")
colData(cur_sce)$sample_id <- as.character(cur_table$IMC[match(unique(colData(cur_sce)$Lausanne_id),
cur_table$mIF)])
colData(cur_sce)$patient_id <- as.character(colData(cur_sce)$sample_id)
return(cur_sce)
})
cur_colnames <- Reduce(c, lapply(cur_sces, function(x){colnames(colData(x))}))
cur_colnames <- unique(cur_colnames)
cur_sces <- lapply(cur_sces, function(x){
cur_cd <- DataFrame(matrix(NA, nrow = ncol(x), ncol = length(cur_colnames)))
colnames(cur_cd) <- cur_colnames
cur_cd[colnames(colData(x))] <- colData(x)
stopifnot(all.equal(cur_cd$cell.ID, x$cell.ID))
colData(x) <- cur_cd
return(x)
})
sce <- do.call("cbind", cur_sces)
# Transform counts
assay(sce, "exprs") <- log(counts(sce))
# Add phenotype labels
cur_key <- as.data.frame(read_csv(paste0(mount_path,"mIF/phenotype_key_IF1.csv")))
rownames(cur_key) <- cur_key$phenotype
sce$celltype <- cur_key[sce$phenotype,2]
sce$matched_celltype <- sce$celltype
sce$matched_celltype[grepl("Tumor", sce$matched_celltype)] <- "Tumor"
sce$indication <- sce$Lausanne_id
sce$indication[grepl("BC", sce$indication)] <- "BCC"
sce$indication[grepl("CRC", sce$indication)] <- "CRC"
sce$indication[grepl("NSCLC", sce$indication)] <- "NSCLC"
sce$indication[grepl("RCC", sce$indication)] <- "RCC"
sce$indication[grepl("SCCHN", sce$indication)] <- "SCCHN"
metadata(sce)$color_vectors <- color_vectors
saveRDS(sce, paste0(mount_path,"mIF/Rout/sce_whole_slide.rds"))
cur_files <- list.files(paste0(mount_path,"mIF/data/final/"),
recursive = TRUE,
pattern = "cells_properties_ROI_coordinates.tsv.gz", full.names = TRUE)
cur_sces <- lapply(cur_files, function(x){
cur_data <- read.csv(x, sep = "\t")
cur_counts <- t(cur_data[,grepl("score.normalized", colnames(cur_data))])
cur_raw <- t(cur_data[,grepl("score$", colnames(cur_data))])
stopifnot(all.equal(str_split(rownames(cur_raw), "\\.", simplify = TRUE),
str_split(rownames(cur_counts), "\\.", simplify = TRUE)[,1:2]))
rownames(cur_counts) <- rownames(cur_raw) <- str_split(rownames(cur_raw), "\\.",
simplify = TRUE)[,1]
cur_sce <- SingleCellExperiment(assays = list(counts = cur_counts,
raw = cur_raw))
colData(cur_sce) <- DataFrame(cur_data[,!grepl("score", colnames(cur_data))])
samp_id <- str_extract(x, "IMMUcan_[2|B].*00[1-9]{1}")
samp_id <- str_split(string = samp_id,pattern = "/",simplify = TRUE)[,2]
colData(cur_sce)$sample_id <- samp_id
colData(cur_sce)$patient_id <- sub("-", "", str_extract(cur_sce$sample_id, "[0-9]{8}-"))
colData(cur_sce)$ROI <- str_extract(cur_sce$sample_id, "00[1-9]{1}$")
# Add additional information from whole slide
cur_sce_2 <- sce[,sce$patient_id == unique(cur_sce$patient_id)]
cur_df <- colData(cur_sce_2)[match(cur_sce$cell.ID, cur_sce_2$cell.ID),]
# Sanity check that phenotypes and cell IDs match
stopifnot(all.equal(cur_sce$phenotype, cur_df$phenotype))
stopifnot(all.equal(cur_sce$cell.ID, cur_df$cell.ID))
# Transfer more information
colData(cur_sce) <- cbind(colData(cur_sce), cur_df[,c("cell.area", "TLS.ID", "Lausanne_id")])
return(cur_sce)
})
cur_colnames <- Reduce(c, lapply(cur_sces, function(x){colnames(colData(x))}))
cur_colnames <- unique(cur_colnames)
cur_sces <- lapply(cur_sces, function(x){
cur_cd <- DataFrame(matrix(NA, nrow = ncol(x), ncol = length(cur_colnames)))
colnames(cur_cd) <- cur_colnames
cur_cd[colnames(colData(x))] <- colData(x)
stopifnot(all.equal(cur_cd$cell.ID, x$cell.ID))
colData(x) <- cur_cd
return(x)
})
sce <- do.call("cbind", cur_sces)
# Transform counts
assay(sce, "exprs") <- log(counts(sce))
col_vec_ROIs <- colorRampPalette(c("dark green", "white", "dark red"))(length(unique(sce$ROI)))
names(col_vec_ROIs) <- unique(sce$ROI)
color_vectors$ROIs <- col_vec_ROIs
metadata(sce)$color_vectors <- color_vectors
sce$celltype <- cur_key[sce$phenotype,2]
sce$matched_celltype <- sce$celltype
sce$matched_celltype[grepl("Tumor", sce$matched_celltype)] <- "Tumor"
library(imcRtools)
# 30Âµm expansion graph
sce <- buildSpatialGraph(sce, img_id = "sample_id", type = "expansion",
coords = c("nucleus.x", "nucleus.y"),
threshold = 60, name = "expansion_60")
# 20Âµm expansion graph
sce <- buildSpatialGraph(sce, img_id = "sample_id", type = "expansion",
coords = c("nucleus.x", "nucleus.y"),
threshold = 40, name = "expansion_40")
plotSpatial(sce, img_id = "sample_id", coords = c("nucleus.x", "nucleus.y"),
node_color_by = "celltype", node_size_fix = 0.1) +
scale_color_manual(values = celltype)
plotSpatial(sce, img_id = "sample_id", coords = c("nucleus.x", "nucleus.y"),
node_color_by = "TLS.ID", node_size_fix = 0.1)
plotSpatial(sce, img_id = "sample_id", coords = c("nucleus.x", "nucleus.y"),
node_color_by = "tissue.type", node_size_fix = 0.1)
saveRDS(sce, paste0(mount_path,"mIF/Rout/sce_ROIs.rds"))
library(EBImage)
library(tiff)
library(cytomapper)
cur_path <- paste0(mount_path,"mIF/multichannel_images/img/")
if (!dir.exists(cur_path)) dir.create(cur_path)
cur_folders <- list.files(paste0(mount_path,"mIF/data/final/"),
full.names = TRUE)
for (i in seq_along(cur_folders)) {
if (length(list.files(cur_folders[i],recursive = TRUE, pattern = "ROI_image.*.rds")) == 0) {
stop("Missing images.")
}
if (!all.equal(basename(list.files(cur_folders[i],recursive = TRUE, pattern = "ROI_image.*.rds")),
c("ROI_image_autofluorescence.rds", "ROI_image_CD11c.rds",
"ROI_image_CD15.rds", "ROI_image_CD163.rds",
"ROI_image_CD20.rds", "ROI_image_CD3.rds",
"ROI_image_CK.rds", "ROI_image_DAPI.rds"))) {
stop("Wrong channel order")
}
cur_channels <- lapply(list.files(cur_folders[i],
recursive = TRUE,
pattern = "ROI_image.*.rds",
full.names = TRUE),
function(x) {
return(readRDS(x))
})
cur_channels <- abind(cur_channels, along = 3)
writeImage(as.array(cur_channels)/(2^16 - 1),
paste0(paste0(mount_path,"mIF/multichannel_images/img/"),
basename(cur_folders[i]), ".tiff"),
bits.per.sample = 16)
}
images <- loadImages(paste0(mount_path,"mIF/multichannel_images/img/"),
as.is = TRUE)
list.files(paste0(mount_path,"mIF/multichannel_images/img/"))
images <- loadImages(paste0(mount_path,"mIF/multichannel_images/img/"),
as.is = TRUE, pattern = "*.tiff")
channelNames(images) <- c("af", "CD11c", "CD15", "CD163", "CD20", "CD3", "CK", "DAPI")
mcols(images) <- DataFrame(image = names(images),
sample_id = sub(".tiff", "", names(images)))
saveRDS(images, paste0(mount_path,"mIF/Rout/images.rds"))
library(SingleCellExperiment)
library(tidyverse)
library(ggpubr)
library(cowplot)
library(imcRtools)
sce_imc <- readRDS(file.path(mount_path, "IMC/Rout/sce_backup20240730.rds"))
sce_mIF <- readRDS(file.path(mount_path, "mIF/Rout/sce_ROIs.rds"))
library(SingleCellExperiment)
library(tidyverse)
library(ggpubr)
library(cowplot)
library(imcRtools)
sce_imc <- readRDS(file.path(mount_path, "IMC/Rout/sce.rds"))
sce_mIF <- readRDS(file.path(mount_path, "mIF/Rout/sce_ROIs.rds"))
cur_mIF <- colData(sce_mIF)
cur_IMC <- colData(sce_imc)
# Count cell types for IMC
abundances_IMC <- unclass(table(cur_IMC$matched_celltype, cur_IMC$sample_id))
# Metdata for IMC
meta_IMC <- data.frame(sample_id = colnames(abundances_IMC),
patient_id = sub("-", "", str_extract(colnames(abundances_IMC), "[0-9]{8}-")),
modality = "IMC")
# Count cell types for mIF
abundances_IF <- unclass(table(cur_mIF$matched_celltype, cur_mIF$sample_id))
# Metadata for mIF
meta_IF <- data.frame(sample_id = colnames(abundances_IF),
patient_id = sub("-", "", str_extract(colnames(abundances_IF), "[0-9]{8}-")),
modality = "mIF")
colnames(abundances_IMC) <- paste(colnames(abundances_IMC), "IMC")
colnames(abundances_IF) <- paste(colnames(abundances_IF), "mIF")
stopifnot(all.equal(rownames(abundances_IMC), rownames(abundances_IF)))
combined_df <- cbind(abundances_IMC, abundances_IF)
combined_meta <- rbind(meta_IMC, meta_IF)
# DA testing
y.ab <- DGEList(combined_df, samples=combined_meta, group = combined_meta$modality)
# Define the design matrix for the model: Add modality to the model to account for matched design
design <- model.matrix(~sample_id + modality, data = y.ab$samples)
# Estimate NB and QL dispersion
y.ab <- estimateDisp(y.ab, design, trend="none")
summary(y.ab$common.dispersion)
plotBCV(y.ab, cex=1)
fit.ab <- glmQLFit(y.ab, design, robust=TRUE, abundance.trend=FALSE)
summary(fit.ab$var.prior)
summary(fit.ab$df.prior)
plotQLDisp(fit.ab, cex=1)
# Test for differential abundance of cell types
res <- glmQLFTest(fit.ab, coef=ncol(design))
summary(decideTests(res))
DA <- topTags(res)$table
DA$celltype <- rownames(DA)
DA$sign <- DA$FDR<0.05
DA
# Volcano plot
ggplot(DA) + geom_point(aes(logFC, -log10(FDR), color = sign)) +
geom_label_repel(aes(logFC, -log10(FDR), label = celltype)) +
theme_classic()
# MA plot
(p <- ggplot(DA) + geom_abline(intercept = 0, slope = 0, color = "dark red", lwd = 3) +
geom_point(aes(logCPM, logFC), size = 7) +
geom_point(aes(logCPM, logFC, color = sign), size = 5) +
geom_label_repel(aes(logCPM, logFC, label = celltype), size = 7) +
scale_color_manual(values = c("TRUE" = "dark green", "FALSE" = "white"),
name = "Significance") +
ylab(c("log2 Fold Change")) + xlab("log2 CPM") +
ylim(c(-1.5, 1.5)) +
theme_classic(base_size = 25))+
theme(legend.position = "none")
# Match cell types
cur_mIF <- colData(sce_mIF)
cur_IMC <- colData(sce_imc)
cur_mIF$sample_id <- as.factor(cur_mIF$sample_id)
cur_mIF$matched_celltype <- as.factor(cur_mIF$matched_celltype)
cur_IMC$sample_id <- as.factor(cur_IMC$sample_id)
cur_IMC$matched_celltype <- as.factor(cur_IMC$matched_celltype)
frac_IMC <- cur_IMC %>% as_tibble() %>%
group_by(sample_id, matched_celltype, .drop = FALSE) %>%
summarize(count = n()) %>%
mutate(frac = count/sum(count))
frac_mIF <- cur_mIF %>% as_tibble() %>%
group_by(sample_id, matched_celltype, .drop = FALSE) %>%
summarize(count = n()) %>%
mutate(frac = count/sum(count))
combined <- left_join(frac_IMC, frac_mIF, by=c("sample_id", "matched_celltype"))
combined$patient_id <- sub("-", "", str_extract(combined$sample_id, "[0-9]{8}-"))
(p_B <- ggplot(combined[combined$matched_celltype == "B",]) +
stat_smooth(aes(frac.x, frac.y, color = patient_id), alpha = 0.5, se = FALSE, method='lm', formula = y~x, fullrange=FALSE, geom = "line", lwd = 1.5) +
geom_smooth(aes(frac.x, frac.y), se = TRUE, method='lm', formula = y~x, fullrange=TRUE, lwd = 1.5) +
geom_point(aes(frac.x, frac.y, color = patient_id), size = 3) +
geom_abline(slope = 1, intercept = 0, color = "dark red", lwd = 1.5) +
theme_classic(base_size = 20) + xlab("") + ylab("") +
scale_color_manual(values = c(metadata(sce_imc)$color_vectors$ROIs, metadata(sce_imc)$color_vectors$patient_id)) +
ylim(c(0, 0.3)) + xlim(c(0, 0.3)) +
stat_regline_equation(aes(frac.x, frac.y, label = ..eq.label..), label.x.npc = 0, label.y.npc = 1, size = 10) +
stat_regline_equation(aes(frac.x, frac.y, label = ..rr.label..), label.x.npc = 0, label.y.npc = 0.9, size = 10) +
theme(legend.position = "none",
axis.text = element_text(size = 20)) +
ggtitle("B cells") +
coord_fixed())
(p_BnT <- ggplot(combined[combined$matched_celltype == "BnT",]) +
stat_smooth(aes(frac.x, frac.y, color = patient_id), alpha = 0.5, se = FALSE, method='lm', formula = y~x, fullrange=FALSE, geom = "line", lwd = 1.5) +
geom_smooth(aes(frac.x, frac.y), se = TRUE, method='lm', formula = y~x, fullrange=TRUE, lwd = 1.5) +
geom_point(aes(frac.x, frac.y, color = patient_id), size = 3) +
geom_abline(slope = 1, intercept = 0, color = "dark red", lwd = 1.5) +
theme_classic(base_size = 20) + xlab("") + ylab("") +
scale_color_manual(values = c(metadata(sce_imc)$color_vectors$ROIs, metadata(sce_imc)$color_vectors$patient_id)) +
ylim(c(0, 0.4)) + xlim(c(0, 0.4)) +
stat_regline_equation(aes(frac.x, frac.y, label = ..eq.label..), label.x.npc = 0, label.y.npc = 1, size = 10) +
stat_regline_equation(aes(frac.x, frac.y, label = ..rr.label..), label.x.npc = 0, label.y.npc = 0.9, size = 10) +
theme(legend.position = "none",
axis.text = element_text(size = 20)) +
ggtitle("BnT cells") +
coord_fixed())
(p_T <- ggplot(combined[combined$matched_celltype == "T",]) +
stat_smooth(aes(frac.x, frac.y, color = patient_id), alpha = 0.5, se = FALSE, method='lm', formula = y~x, fullrange=FALSE, geom = "line", lwd = 1.5) +
geom_smooth(aes(frac.x, frac.y), se = TRUE, method='lm', formula = y~x, fullrange=TRUE, lwd = 1.5) +
geom_point(aes(frac.x, frac.y, color = patient_id), size = 3) +
geom_abline(slope = 1, intercept = 0, color = "dark red", lwd = 1.5) +
theme_classic(base_size = 20) + xlab("") + ylab("") +
scale_color_manual(values = c(metadata(sce_imc)$color_vectors$ROIs, metadata(sce_imc)$color_vectors$patient_id)) +
ylim(c(0, 0.6)) + xlim(c(0, 0.6)) +
stat_regline_equation(aes(frac.x, frac.y, label = ..eq.label..), label.x.npc = 0, label.y.npc = 1, size = 10) +
stat_regline_equation(aes(frac.x, frac.y, label = ..rr.label..), label.x.npc = 0, label.y.npc = 0.9, size = 10) +
theme(legend.position = "none",
axis.text = element_text(size = 20)) +
ggtitle("T cells") +
coord_fixed())
(p_Mac <- ggplot(combined[combined$matched_celltype == "MacCD163",]) +
stat_smooth(aes(frac.x, frac.y, color = patient_id), alpha = 0.5, se = FALSE, method='lm', formula = y~x, fullrange=FALSE, geom = "line", lwd = 1.5) +
geom_smooth(aes(frac.x, frac.y), se = TRUE, method='lm', formula = y~x, fullrange=TRUE, lwd = 1.5) +
geom_point(aes(frac.x, frac.y, color = patient_id), size = 3) +
geom_abline(slope = 1, intercept = 0, color = "dark red", lwd = 1.5) +
theme_classic(base_size = 20) + xlab("") + ylab("") +
scale_color_manual(values = c(metadata(sce_imc)$color_vectors$ROIs, metadata(sce_imc)$color_vectors$patient_id)) +
ylim(c(0, 0.3)) + xlim(c(0, 0.3)) +
stat_regline_equation(aes(frac.x, frac.y, label = ..eq.label..), label.x.npc = 0, label.y.npc = 1, size = 10) +
stat_regline_equation(aes(frac.x, frac.y, label = ..rr.label..), label.x.npc = 0, label.y.npc = 0.9, size = 10) +
theme(legend.position = "none",
axis.text = element_text(size = 20)) +
ggtitle("Macrophages") +
coord_fixed())
(p_DC <- ggplot(combined[combined$matched_celltype == "DC",]) +
stat_smooth(aes(frac.x, frac.y, color = patient_id), alpha = 0.5, se = FALSE, method='lm', formula = y~x, fullrange=FALSE, geom = "line", lwd = 1.5) +
geom_smooth(aes(frac.x, frac.y), se = TRUE, method='lm', formula = y~x, fullrange=TRUE, lwd = 1.5) +
geom_point(aes(frac.x, frac.y, color = patient_id), size = 3) +
geom_abline(slope = 1, intercept = 0, color = "dark red", lwd = 1.5) +
theme_classic(base_size = 20) + xlab("") + ylab("") +
scale_color_manual(values = c(metadata(sce_imc)$color_vectors$ROIs, metadata(sce_imc)$color_vectors$patient_id)) +
ylim(c(0, 0.2)) + xlim(c(0, 0.2)) +
stat_regline_equation(aes(frac.x, frac.y, label = ..eq.label..), label.x.npc = 0, label.y.npc = 1, size = 10) +
stat_regline_equation(aes(frac.x, frac.y, label = ..rr.label..), label.x.npc = 0, label.y.npc = 0.9, size = 10) +
theme(legend.position = "none",
axis.text = element_text(size = 20)) +
ggtitle("DC") +
coord_fixed())
(p_Neutro <- ggplot(combined[combined$matched_celltype == "Neutrophil",]) +
stat_smooth(aes(frac.x, frac.y, color = patient_id), alpha = 0.5, se = FALSE, method='lm', formula = y~x, fullrange=FALSE, geom = "line", lwd = 1.5) +
geom_smooth(aes(frac.x, frac.y), se = TRUE, method='lm', formula = y~x, fullrange=TRUE, lwd = 1.5) +
geom_point(aes(frac.x, frac.y, color = patient_id), size = 3) +
geom_abline(slope = 1, intercept = 0, color = "dark red", lwd = 1.5) +
theme_classic(base_size = 20) + xlab("") + ylab("") +
scale_color_manual(values = c(metadata(sce_imc)$color_vectors$ROIs, metadata(sce_imc)$color_vectors$patient_id)) +
ylim(c(0, 0.2)) + xlim(c(0, 0.2)) +
stat_regline_equation(aes(frac.x, frac.y, label = ..eq.label..), label.x.npc = 0, label.y.npc = 1, size = 10) +
stat_regline_equation(aes(frac.x, frac.y, label = ..rr.label..), label.x.npc = 0, label.y.npc = 0.9, size = 10) +
theme(legend.position = "none",
axis.text = element_text(size = 20)) +
ggtitle("Neutrophils") +
coord_fixed())
(p_Tumor <- ggplot(combined[combined$matched_celltype == "Tumor",]) +
stat_smooth(aes(frac.x, frac.y, color = patient_id), alpha = 0.5, se = FALSE, method='lm', formula = y~x, fullrange=FALSE, geom = "line", lwd = 1.5) +
geom_smooth(aes(frac.x, frac.y), se = TRUE, method='lm', formula = y~x, fullrange=TRUE, lwd = 1.5) +
geom_point(aes(frac.x, frac.y, color = patient_id), size = 3) +
geom_abline(slope = 1, intercept = 0, color = "dark red", lwd = 1.5) +
theme_classic(base_size = 20) + xlab("") + ylab("") +
scale_color_manual(values = c(metadata(sce_imc)$color_vectors$ROIs, metadata(sce_imc)$color_vectors$patient_id)) +
ylim(c(0, 0.8)) + xlim(c(0, 0.8)) +
stat_regline_equation(aes(frac.x, frac.y, label = ..eq.label..), label.x.npc = 0, label.y.npc = 1, size = 10) +
stat_regline_equation(aes(frac.x, frac.y, label = ..rr.label..), label.x.npc = 0, label.y.npc = 0.9, size = 10) +
theme(legend.position = "none",
axis.text = element_text(size = 20)) +
ggtitle("Tumor") +
coord_fixed())
(p_other <- ggplot(combined[combined$matched_celltype == "other",]) +
stat_smooth(aes(frac.x, frac.y, color = patient_id), alpha = 0.5, se = FALSE, method='lm', formula = y~x, fullrange=FALSE, geom = "line", lwd = 1.5) +
geom_smooth(aes(frac.x, frac.y), se = TRUE, method='lm', formula = y~x, fullrange=TRUE, lwd = 1.5) +
geom_point(aes(frac.x, frac.y, color = patient_id), size = 3) +
geom_abline(slope = 1, intercept = 0, color = "dark red", lwd = 1.5) +
theme_classic(base_size = 20) + xlab("") + ylab("") +
scale_color_manual(values = c(metadata(sce_imc)$color_vectors$ROIs, metadata(sce_imc)$color_vectors$patient_id)) +
ylim(c(0, 0.7)) + xlim(c(0, 0.7)) +
stat_regline_equation(aes(frac.x, frac.y, label = ..eq.label..), label.x.npc = 0, label.y.npc = 1, size = 10) +
stat_regline_equation(aes(frac.x, frac.y, label = ..rr.label..), label.x.npc = 0, label.y.npc = 0.9, size = 10) +
theme(legend.position = "none",
axis.text = element_text(size = 20)) +
ggtitle("Other cells") +
coord_fixed())
cur_mIF <- colData(sce_mIF)
cur_IMC <- colData(sce_imc)
cur_mIF$sample_id <- as.factor(cur_mIF$sample_id)
cur_mIF$TLS.ID <- as.factor(!is.na(cur_mIF$TLS.ID))
cur_mIF$tissue.type <- as.factor(cur_mIF$tissue.type == "tumor")
cur_IMC$sample_id <- as.factor(cur_IMC$sample_id)
cur_IMC$CD20_patches <- as.factor(!is.na(cur_IMC$CD20_patches))
cur_IMC$tumor_patches <- as.factor(cur_IMC$tumor_patches)
frac_IMC_TLS <- cur_IMC %>% as_tibble() %>%
group_by(sample_id, CD20_patches, .drop = FALSE) %>%
summarize(count = n()) %>%
mutate(frac = count/sum(count))
frac_mIF_TLS <- cur_mIF %>% as_tibble() %>%
group_by(sample_id, TLS.ID, .drop = FALSE) %>%
summarize(count = n()) %>%
mutate(frac = count/sum(count))
frac_IMC_tumor <- cur_IMC %>% as_tibble() %>%
group_by(sample_id, tumor_patches, .drop = FALSE) %>%
summarize(count = n()) %>%
mutate(frac = count/sum(count))
frac_mIF_tumor <- cur_mIF %>% as_tibble() %>%
group_by(sample_id, tissue.type, .drop = FALSE) %>%
summarize(count = n()) %>%
mutate(frac = count/sum(count))
combined_TLS <- left_join(frac_IMC_TLS, frac_mIF_TLS, by = join_by("sample_id", CD20_patches == TLS.ID))
combined_TLS$patient_id <- sub("-", "", str_extract(combined_TLS$sample_id, "[0-9]{8}-"))
combined_tumor <- left_join(frac_IMC_tumor, frac_mIF_tumor, by = join_by("sample_id", tumor_patches == tissue.type))
combined_tumor$patient_id <- sub("-", "", str_extract(combined_tumor$sample_id, "[0-9]{8}-"))
(p_TLS <- ggplot(combined_TLS[combined_TLS$CD20_patches == TRUE,]) +
stat_smooth(aes(frac.x, frac.y, color = patient_id), alpha = 0.5, se = FALSE, method='lm', formula = y~x, fullrange=FALSE, geom = "line", lwd = 1.5) +
geom_smooth(aes(frac.x, frac.y), se = TRUE, method='lm', formula = y~x, fullrange=TRUE, lwd = 1.5) +
geom_point(aes(frac.x, frac.y, color = patient_id), size = 3) +
geom_abline(slope = 1, intercept = 0, color = "dark red", lwd = 1.5) +
theme_classic(base_size = 20) + xlab("") + ylab("") +
scale_color_manual(values = c(metadata(sce_imc)$color_vectors$ROIs, metadata(sce_imc)$color_vectors$patient_id)) +
ylim(c(0, 1)) + xlim(c(0, 1)) +
stat_regline_equation(aes(frac.x, frac.y, label = ..eq.label..), label.x.npc = 0, label.y.npc = 1, size = 10) +
stat_regline_equation(aes(frac.x, frac.y, label = ..rr.label..), label.x.npc = 0, label.y.npc = 0.9, size = 10) +
theme(legend.position = "none",
axis.text = element_text(size = 20)) +
ggtitle("CD20 patches") +
coord_fixed())
(p_tumor <- ggplot(combined_tumor[combined_tumor$tumor_patches == TRUE,]) +
stat_smooth(aes(frac.x, frac.y, color = patient_id), alpha = 0.5, se = FALSE, method='lm', formula = y~x, fullrange=FALSE, geom = "line", lwd = 1.5) +
geom_smooth(aes(frac.x, frac.y), se = TRUE, method='lm', formula = y~x, fullrange=TRUE, lwd = 1.5) +
geom_point(aes(frac.x, frac.y, color = patient_id), size = 3) +
geom_abline(slope = 1, intercept = 0, color = "dark red", lwd = 1.5) +
theme_classic(base_size = 20) + xlab("") + ylab("") +
scale_color_manual(values = c(metadata(sce_imc)$color_vectors$ROIs, metadata(sce_imc)$color_vectors$patient_id)) +
ylim(c(0, 1)) + xlim(c(0, 1)) +
stat_regline_equation(aes(frac.x, frac.y, label = ..eq.label..), label.x.npc = 0, label.y.npc = 1, size = 10) +
stat_regline_equation(aes(frac.x, frac.y, label = ..rr.label..), label.x.npc = 0, label.y.npc = 0.9, size = 10) +
theme(legend.position = "none",
axis.text = element_text(size = 20)) +
ggtitle("Tumor patches") +
coord_fixed())
p_final <- plot_grid(p_T, p_B, p_BnT, p_Tumor, p_Mac, p_DC, p_other, p_Neutro, p_TLS, p_tumor, nrow = 2, ncol = 5)
p_final
ggsave(filename = "output/Figure_5/Figure_5C_new.pdf", plot = p_final, width = 30, height = 15)
ggsave(filename = "output/Figure_5/Figure_5C.pdf", plot = p_final, width = 30, height = 15)
# Prepare mIF data
cur_mIF <- sce_mIF
colData(cur_mIF) <- colData(cur_mIF)[,c("sample_id", "patient_id", "nucleus.x", "nucleus.y", "matched_celltype")]
cur_mIF$Pos_X <- cur_mIF$nucleus.x
cur_mIF$Pos_Y <- cur_mIF$nucleus.y
cur_mIF$Pos_X <- cur_mIF$Pos_X * 0.4962
cur_mIF$Pos_Y <- cur_mIF$Pos_Y * 0.4962
cur_mIF$nucleus.x <- NULL
cur_mIF$nucleus.y <- NULL
rowData(cur_mIF) <- NULL
assays(cur_mIF) <- list()
metadata(cur_mIF) <- list()
rownames(cur_mIF) <- NULL
colPairs(cur_mIF) <- NULL
cur_mIF$modality <- "mIF"
# Prepare IMC data
cur_IMC <- sce_imc
colData(cur_IMC) <- colData(cur_IMC)[,c("sample_id", "patient_id", "matched_celltype", "Pos_X", "Pos_Y")]
rowData(cur_IMC) <- NULL
assays(cur_IMC) <- list()
metadata(cur_IMC) <- list()
rownames(cur_IMC) <- NULL
reducedDims(cur_IMC) <- NULL
colPairs(cur_IMC) <- NULL
cur_IMC$modality <- "IMC"
# Merge data
all_sce <- cbind(cur_IMC[1:6,], cur_mIF)
all_sce$sample_id_global <- paste0(all_sce$sample_id, "_", all_sce$modality)
library(sf)
library(spatstat)
sce_imc$patient_id
clin_dat <- read.csv("O:/projects/immucan/clinical_data/Lung_NSCLC2/20230825/NSCLC2_for_R_update_2024.csv")
lapply(colnames(clin_dat),function(x) unique(clin_dat[,x]))
unlist(lapply(colnames(clin_dat),function(x) unique(clin_dat[,x])))
lapply(colnames(clin_dat),function(x) unique(clin_dat[,x])
)
entries <- lapply(colnames(clin_dat),function(x) unique(clin_dat[,x])
)
names(entries) <- colnames(clin_dat)
entries
