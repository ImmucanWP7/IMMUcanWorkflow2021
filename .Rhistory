rownames(cur_mIF) <- NULL
colPairs(cur_mIF) <- NULL
cur_mIF$modality <- "mIF"
# Prepare IMC data
cur_IMC <- sce_IMC
colData(cur_IMC) <- colData(cur_IMC)[,c("sample_id", "patient_id", "matched_celltype", "Pos_X", "Pos_Y")]
cur_IMC$tissue.type <- c("stroma", "tumor")[as.numeric(sce_IMC$tumor_patches) + 1]
cur_IMC$TLS.ID <- sce_IMC$CD20_patches
rowData(cur_IMC) <- NULL
assays(cur_IMC) <- list()
metadata(cur_IMC) <- list()
rownames(cur_IMC) <- NULL
reducedDims(cur_IMC) <- NULL
colPairs(cur_IMC) <- NULL
cur_IMC$modality <- "IMC"
# Merge data
all_sce <- cbind(cur_IMC[1:6,], cur_mIF)
all_sce$sample_id_global <- paste0(all_sce$sample_id, "_", all_sce$modality)
library(sf)
library(spatstat)
set.seed(12345)
out <- lapply(unique(all_sce$sample_id), function(x){
cur_sce <- all_sce[,all_sce$sample_id == x]
cur_sce <- cur_sce[,cur_sce$TLS == TRUE]
if (sum(cur_sce$modality == "IMC") < 10 | sum(cur_sce$modality == "mIF") < 10) {
return(NULL)
}
cur_ppp <- ppp(x = cur_sce$Pos_X, y = cur_sce$Pos_Y,
xrange = c(0, max(cur_sce$Pos_X)), yrange = c(0, max(cur_sce$Pos_Y)),
marks = factor(cur_sce$modality, levels = c("IMC", "mIF")))
cur_L <- Lcross(cur_ppp, i = "IMC", j = "mIF")
cur_L_inhom <- Lcross.inhom(cur_ppp, i = "IMC", j = "mIF")
cur_test <- mad.test(cur_ppp, fun = Lcross, i = "IMC", j = "mIF")
cur_test_inhom <- mad.test(cur_ppp, fun = Lcross.inhom, i = "IMC", j = "mIF")
return(list(test = cur_test, test_inhom = cur_test_inhom,
L = cur_L, L_inhom = cur_L_inhom))
})
names(out) <- unique(all_sce$sample_id)
cur_summary <- unlist(out, recursive = FALSE)
cur_p <- lapply(cur_summary[grepl("test$", names(cur_summary))],
function(x){
return(x$p.value)
})
cur_p_inhom <- lapply(cur_summary[grepl("test_inhom$", names(cur_summary))],
function(x){
return(x$p.value)
})
cur_area <- lapply(cur_summary[grepl("L$", names(cur_summary))],
function(x){
return(sum(x$iso - x$theo))
})
cur_area_inhom <- lapply(cur_summary[grepl("L_inhom$", names(cur_summary))],
function(x){
return(sum(x$iso - x$theo))
})
# Check that names match
all.equal(str_split(names(cur_p), "\\.", simplify = TRUE)[,1], str_split(names(cur_p_inhom), "\\.", simplify = TRUE)[,1])
out
# binarize TLS information
all_sce$TLS <- FALSE
all_sce[,!is.na(all_sce$TLS.ID)]$TLS <- TRUE
# Example image
cur_sce <- all_sce[,all_sce$sample_id == "IMMUcan_Batch20210921_10082495-SPECT-VAR-TIS-01-IMC-01_004"]
cur_sce <- cur_sce[,cur_sce$TLS == TRUE]
plotSpatial(cur_sce, node_color_by = "modality", img_id = "sample_id", flip_y = TRUE)
set.seed(12345)
out <- lapply(unique(all_sce$sample_id), function(x){
cur_sce <- all_sce[,all_sce$sample_id == x]
cur_sce <- cur_sce[,cur_sce$TLS == TRUE]
if (sum(cur_sce$modality == "IMC") < 10 | sum(cur_sce$modality == "mIF") < 10) {
return(NULL)
}
cur_ppp <- ppp(x = cur_sce$Pos_X, y = cur_sce$Pos_Y,
xrange = c(0, max(cur_sce$Pos_X)), yrange = c(0, max(cur_sce$Pos_Y)),
marks = factor(cur_sce$modality, levels = c("IMC", "mIF")))
cur_L <- Lcross(cur_ppp, i = "IMC", j = "mIF")
cur_L_inhom <- Lcross.inhom(cur_ppp, i = "IMC", j = "mIF")
cur_test <- mad.test(cur_ppp, fun = Lcross, i = "IMC", j = "mIF")
cur_test_inhom <- mad.test(cur_ppp, fun = Lcross.inhom, i = "IMC", j = "mIF")
return(list(test = cur_test, test_inhom = cur_test_inhom,
L = cur_L, L_inhom = cur_L_inhom))
})
names(out) <- unique(all_sce$sample_id)
cur_summary <- unlist(out, recursive = FALSE)
cur_p <- lapply(cur_summary[grepl("test$", names(cur_summary))],
function(x){
return(x$p.value)
})
cur_p_inhom <- lapply(cur_summary[grepl("test_inhom$", names(cur_summary))],
function(x){
return(x$p.value)
})
cur_area <- lapply(cur_summary[grepl("L$", names(cur_summary))],
function(x){
return(sum(x$iso - x$theo))
})
cur_area_inhom <- lapply(cur_summary[grepl("L_inhom$", names(cur_summary))],
function(x){
return(su
all.equal(str_split(names(cur_p), "\\.", simplify = TRUE)[,1], str_split(names(cur_p_inhom), "\\.", simplify = TRUE)[,1])
# Check that names match
all.equal(str_split(names(cur_p), "\\.", simplify = TRUE)[,1], str_split(names(cur_p_inhom), "\\.", simplify = TRUE)[,1])
all.equal(str_split(names(cur_p), "\\.", simplify = TRUE)[,1], str_split(names(cur_area), "\\.", simplify = TRUE)[,1])
all.equal(str_split(names(cur_p), "\\.", simplify = TRUE)[,1], str_split(names(cur_area_inhom), "\\.", simplify = TRUE)[,1])
all.equal(str_split(names(cur_p), "\\.", simplify = TRUE)[,1], str_split(names(cur_area_inhom), "\\.", simplify = TRUE)[,1])
cur_area_inhom
out
cur_summary
cur_p
cur_p_inhom
cur_area
cur_area_inhom
names(cur_summary)
out$`IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002`$L_inhom
out$`IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002`$L_inhom$r
cur_area_inhom
cur_area_inhom <- lapply(cur_summary[grepl("L_inhom$", names(cur_summary))],
function(x){
return(sum(x$iso - x$theo))
})
cur_area_inhom
all.equal(str_split(names(cur_p), "\\.", simplify = TRUE)[,1], str_split(names(cur_p_inhom), "\\.", simplify = TRUE)[,1])
all.equal(str_split(names(cur_p), "\\.", simplify = TRUE)[,1], str_split(names(cur_area), "\\.", simplify = TRUE)[,1])
all.equal(str_split(names(cur_p), "\\.", simplify = TRUE)[,1], str_split(names(cur_area_inhom), "\\.", simplify = TRUE)[,1])
final <- data.frame(p = unlist(cur_p),
p_inhom = unlist(cur_p_inhom),
area = unlist(cur_area),
area_inhom = unlist(cur_area_inhom),
sample_id = sub("_", "", str_extract(names(cur_p), "_[0-9]{8}")),
celltype = str_split(names(cur_p), "\\.", simplify = TRUE)[,2])
final
p <- final %>%
ggplot()+
geom_col(aes(x = sample_id,y = area,fill=as.factor(p_inhom)))+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust= 0.5, hjust = 1))+
ylab("Area between L curve and theoretical L curve")+
labs(fill = ("significant"))
p
final
names(cur_p)
str_extract("\\d[3].test",names(cur_p))
str_extract("\d[3].test",names(cur_p))
str_extract("\d{3}.test",names(cur_p))
str_extract("\\d{3}.test",names(cur_p))
str_extract("\\d{3}.test",names(cur_p)[1])
str_extract(names(cur_p), "\\w{3}(?=\\.test)")
final <- data.frame(p = unlist(cur_p),
p_inhom = unlist(cur_p_inhom),
area = unlist(cur_area),
area_inhom = unlist(cur_area_inhom),
sample_id = sub("_", "", str_extract(names(cur_p), "_[0-9]{8}")),
ROI = str_extract(names(cur_p), "\\w{3}(?=\\.test)"),
celltype = str_split(names(cur_p), "\\.", simplify = TRUE)[,2])
p <- final %>%
ggplot()+
geom_col(aes(x = sample_id,y = area,fill=as.factor(p_inhom),group=ROI))+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust= 0.5, hjust = 1))+
ylab("Area between L curve and theoretical L curve")+
labs(fill = ("significant"))
p
p <- final %>%
ggplot()+
geom_col(aes(x = sample_id,y = area,fill=as.factor(ROI)))+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust= 0.5, hjust = 1))+
ylab("Area between L curve and theoretical L curve")+
labs(fill = ("significant"))
p
p <- final %>%
ggplot()+
geom_col(aes(x = ROI,y = area,fill=as.factor(p_inhom)))+
facet_wrap(.~sample_id)+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust= 0.5, hjust = 1))+
ylab("Area between L curve and theoretical L curve")+
labs(fill = ("significant"))
p
final
final
ggplot(final) +
geom_boxplot(aes(celltype, area), outlier.shape = NA)
ggplot(final) +
geom_boxplot(aes(celltype, area, col= sample_id_global), outlier.shape = NA)
ggplot(final) +
geom_boxplot(aes(celltype, area, col= sample_id), outlier.shape = NA)
ggplot(final) +
geom_point(aes(celltype, area, col= sample_id), outlier.shape = NA)
ggplot(final) +
#geom_point(aes(celltype, area, col= sample_id), outlier.shape = NA) +
geom_jitter(aes(celltype, area, color = p <= 0.01 & area > 0))
final %>%
ggplot()+
geom_col(aes(x = ROI,y = area,fill=as.factor(p_inhom)))+
#facet_wrap(.~sample_id)+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust= 0.5, hjust = 1))+
ylab("Area between L curve and theoretical L curve")+
labs(fill = ("significant"))
final <- data.frame(p = unlist(cur_p),
p_inhom = unlist(cur_p_inhom),
area = unlist(cur_area),
area_inhom = unlist(cur_area_inhom),
sample_id = sub("_", "", str_extract(names(cur_p), "_[0-9]{8}")),
ROI = str_extract(names(cur_p), "\\w{3}(?=\\.test)"),
sample_id <- paste0(sample_id,"_",ROI),
celltype = str_split(names(cur_p), "\\.", simplify = TRUE)[,2])
final <- data.frame(p = unlist(cur_p),
p_inhom = unlist(cur_p_inhom),
area = unlist(cur_area),
area_inhom = unlist(cur_area_inhom),
sample_id = sub("_", "", str_extract(names(cur_p), "_[0-9]{8}")),
ROI = str_extract(names(cur_p), "\\w{3}(?=\\.test)"),
sample_id = paste0(sample_id,"_",ROI),
celltype = str_split(names(cur_p), "\\.", simplify = TRUE)[,2])
p <- final %>%
mutate(sample_id = paste0(sample_id,"_",ROI)) %>%
ggplot()+
geom_col(aes(x = sample_id,y = area,fill=as.factor(p_inhom)))+
#facet_wrap(.~sample_id)+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust= 0.5, hjust = 1))+
ylab("Area between L curve and theoretical L curve")+
labs(fill = ("significant"))
p
final[final$p > 0.01 | final$area < 0,]
p
ggsave(filename = "../output/Figure_S7/Fig_S7C.pdf", plot = p, width = 6, height = 4)
p <- final %>%
mutate(sample_id = paste0(sample_id,"_",ROI)) %>%
ggplot()+
geom_col(aes(x = sample_id,y = area_inhom,fill=as.factor(p_inhom)))+
#facet_wrap(.~sample_id)+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust= 0.5, hjust = 1))+
ylab("Area between L curve and theoretical L curve")+
labs(fill = ("significant"))
p
# Create multipoint pattern
cur_ppp <- ppp(x = cur_sce$Pos_X, y = cur_sce$Pos_Y,
xrange = c(0, max(cur_sce$Pos_X)), yrange = c(0, max(cur_sce$Pos_Y)),
marks = factor(cur_sce$modality, levels = c("IMC", "mIF")))
plot(cur_ppp)
miplot(cur_ppp)
cur_L <- Lcross(cur_ppp, "IMC", "mIF")
plot(cur_L)
cur_L_inhom <- Lcross.inhom(cur_ppp, "IMC", "mIF")
plot(cur_L_inhom)
cur_env <- envelope(cur_ppp, Lcross, i = "mIF", j = "IMC", fix.n = TRUE, fix.marks = TRUE)
plot(cur_env)
cur_env <- envelope(cur_ppp, Lcross, i = "IMC", j = "mIF", fix.n = TRUE, fix.marks = TRUE, alternative = "greater")
plot(cur_env)
cur_test <- mad.test(cur_ppp, fun = Lcross, i = "IMC", j = "mIF", fix.n = TRUE, fix.marks = TRUE)
cur_env_inhom <- envelope(cur_ppp, Lcross.inhom, i = "IMC", j = "mIF")
View(final)
plot(cur_env_inhom)
plot(cur_L_inhom)
plot(cur_env_inhom)
plot(cur_L)
plot(cur_L_inhom)
plot(cur_L)
plot(cur_L_inhom)
plot(cur_env_inhom)
p <- final %>%
mutate(sample_id = paste0(sample_id,"_",ROI)) %>%
ggplot()+
geom_col(aes(x = sample_id,y = area,fill=as.factor(p)))+
#facet_wrap(.~sample_id)+
theme_bw()+
theme(axis.text.x = element_text(angle = 90, vjust= 0.5, hjust = 1))+
ylab("Area between L curve and theoretical L curve")+
labs(fill = ("significant"))
p
final
p
ggsave(filename = "../output/Figure_S7/Fig_S7C.pdf", plot = p, width = 6, height = 4)
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
library(RColorBrewer)
color_vectors <- list()
matched_celltype <- setNames(c("sienna4", "magenta3", "skyblue3", "green3", "grey75", "green4", "#BF0A3D", "#F4800C"),
c("Tumor", "T", "Neutrophil", "MacCD163",
"other", "DC", "B", "BnT"))
celltype <- setNames(c("sienna4", "tan3", "magenta3", "skyblue3", "green3", "grey75", "green4", "#BF0A3D", "#F4800C"),
c("Tumor", "Tumor_CD15", "T", "Neutrophil", "MacCD163",
"other", "DC", "B", "BnT"))
patient_id <- setNames(c("#BE1E2D", "#FF4B5B", "#F7941D", "#FFCA89", "#00A651", "#5FFF73", "#00AEEF", "#9BD7FF", "#2E3192", "#675BFF"),
c("10061074", "10067433", "10068868", "10071582", "10073140", "10074349", "10074832", "10075371", "10075572", "10082495"))
col_vec_indication <- c(CRC = "#5B1C55", SCCHN = "#39BEB4", NSCLC = "#F79C1D",
BCC = "#3F85A7", RCC = "#C81F43")
color_vectors$patient_id <- patient_id
color_vectors$Indication <- col_vec_indication
color_vectors$matched_celltype <- matched_celltype
color_vectors$celltype <- celltype
library(SingleCellExperiment)
library(tidyverse)
cur_files <- list.files("/Volumes/G_DQBM_BB_Central$/projects/immucan/processed_data/Panel_1/2022_WORKFLOW/mIF/data/whole_slide/",
pattern = "cells_properties_", full.names = TRUE)
cur_files_2 <- list.files("/Volumes/G_DQBM_BB_Central$/projects/immucan/processed_data/Panel_1/2022_WORKFLOW/mIF/data/whole_slide/",
pattern = "cells_properties2_", full.names = TRUE)
# Map between Lausanne and Zurich IDs
cur_table <- read_csv("/Volumes/G_DQBM_BB_Central$/projects/immucan/processed_data/Panel_1/2022_WORKFLOW/comparisons/sample_mapping.csv")
cur_files <- list.files("O:/G_DQBM_BB_Central$/projects/immucan/processed_data/Panel_1/2022_WORKFLOW/mIF/data/whole_slide/",
pattern = "cells_properties_", full.names = TRUE)
cur_files_2 <- list.files("O:/G_DQBM_BB_Central$/projects/immucan/processed_data/Panel_1/2022_WORKFLOW/mIF/data/whole_slide/",
pattern = "cells_properties2_", full.names = TRUE)
# Map between Lausanne and Zurich IDs
cur_table <- read_csv("O:/G_DQBM_BB_Central$/projects/immucan/processed_data/Panel_1/2022_WORKFLOW/comparisons/sample_mapping.csv")
cur_files <- list.files("O:/projects/immucan/processed_data/Panel_1/2022_WORKFLOW/mIF/data/whole_slide/",
pattern = "cells_properties_", full.names = TRUE)
cur_files_2 <- list.files("O:/projects/immucan/processed_data/Panel_1/2022_WORKFLOW/mIF/data/whole_slide/",
pattern = "cells_properties2_", full.names = TRUE)
# Map between Lausanne and Zurich IDs
cur_table <- read_csv("O:/projects/immucan/processed_data/Panel_1/2022_WORKFLOW/comparisons/sample_mapping.csv")
# Read in data
cur_sces <- lapply(seq_along(cur_files), function(x){
cur_data <- read.csv(cur_files[x], sep = "\t")
cur_data_2 <- read.csv(cur_files_2[x], sep = "\t")
stopifnot(all.equal(cur_data$cell.ID, cur_data_2$cell.ID))
cur_data <- cbind(cur_data, cur_data_2[,c("cell.area", "TLS.ID")])
cur_counts <- t(cur_data[,grepl("score.normalized", colnames(cur_data))])
cur_raw <- t(cur_data[,grepl("score$", colnames(cur_data))])
stopifnot(all.equal(str_split(rownames(cur_raw), "\\.", simplify = TRUE),
str_split(rownames(cur_counts), "\\.", simplify = TRUE)[,1:2]))
rownames(cur_counts) <- rownames(cur_raw) <- str_split(rownames(cur_raw), "\\.",
simplify = TRUE)[,1]
cur_sce <- SingleCellExperiment(assays = list(counts = cur_counts,
raw = cur_raw))
colData(cur_sce) <- DataFrame(cur_data[,!grepl("score", colnames(cur_data))])
colData(cur_sce)$Lausanne_id <- str_extract(cur_files[x], "IMMU-[A-Z0-9]*-[0-9]{4}")
colData(cur_sce)$sample_id <- as.character(cur_table$IMC[match(unique(colData(cur_sce)$Lausanne_id),
cur_table$mIF)])
colData(cur_sce)$patient_id <- as.character(colData(cur_sce)$sample_id)
return(cur_sce)
})
cur_colnames <- Reduce(c, lapply(cur_sces, function(x){colnames(colData(x))}))
cur_colnames <- unique(cur_colnames)
cur_sces <- lapply(cur_sces, function(x){
cur_cd <- DataFrame(matrix(NA, nrow = ncol(x), ncol = length(cur_colnames)))
colnames(cur_cd) <- cur_colnames
cur_cd[colnames(colData(x))] <- colData(x)
stopifnot(all.equal(cur_cd$cell.ID, x$cell.ID))
colData(x) <- cur_cd
return(x)
})
sce <- do.call("cbind", cur_sces)
# Transform counts
assay(sce, "exprs") <- log(counts(sce))
# Add phenotype labels
cur_key <- as.data.frame(read_csv("~/Github/mIF_cell_types/cell_types/phenotype_key_IF1.csv"))
# Add phenotype labels
cur_key <- as.data.frame(read_csv("O:/projects/immucan/processed_data/Panel_1/2022_WORKFLOW/mIF/phenotype_key_IF1.csv"))
rownames(cur_key) <- cur_key$phenotype
sce$celltype <- cur_key[sce$phenotype,2]
sce$matched_celltype <- sce$celltype
sce$matched_celltype[grepl("Tumor", sce$matched_celltype)] <- "Tumor"
sce$indication <- sce$Lausanne_id
sce$indication[grepl("BC", sce$indication)] <- "BCC"
sce$indication[grepl("CRC", sce$indication)] <- "CRC"
sce$indication[grepl("NSCLC", sce$indication)] <- "NSCLC"
sce$indication[grepl("RCC", sce$indication)] <- "RCC"
sce$indication[grepl("SCCHN", sce$indication)] <- "SCCHN"
metadata(sce)$color_vectors <- color_vectors
test_sce <- readRDS("O:/projects/immucan/processed_data/Panel_1/2022_WORKFLOW/mIF/Rout/sce_whole_slide.rds")
test_sce <- readRDS("O:/projects/immucan/processed_data/Panel_1/2022_WORKFLOW/mIF/Rout/sce_whole_slide.rds")
test_sce
sce
# Set path
if (Sys.info()["sysname"] == "Windows"){
mount_path <- "O:/projects/immucan"
} else {
mount_path <- "/Volumes/G_DQBM_BB_Central$/projects/immucan"
}
library(SingleCellExperiment)
library(tidyverse)
library(ggpubr)
library(cowplot)
library(imcRtools)
sce_IMC <- readRDS(file.path(mount_path, "processed_data/Panel_1/2022_WORKFLOW/IMC/Rout/sce.rds"))
sce_mIF <- readRDS(file.path(mount_path, "processed_data/Panel_1/2022_WORKFLOW/mIF/Rout/sce_ROIs.rds"))
getwd()
if (!dir.exists("../output/Figure_5/")) dir.create("../output/Figure_5/")
cur_IMC <- sce_IMC[,sce_IMC$sample_id == "IMMUcan_2022_WFLOW_10068868-SPECT-VAR-TIS-01-IMC-01_008"]
cur_mIF <- sce_mIF[,sce_mIF$sample_id == "IMMUcan_2022_WFLOW_10068868-SPECT-VAR-TIS-01-IMC-01_008"]
# Rescale to same x-y dimensions - one pixel in mIF is 0.4962µm
cur_mIF$nucleus.x <- cur_mIF$nucleus.x * 0.4962
cur_mIF$nucleus.y <- cur_mIF$nucleus.y * 0.4962
cur_mIF$TLS.ID <- as.character(cur_mIF$TLS.ID)
# Plot to match Figure 3
(p_4 <- plotSpatial(cur_IMC, img_id = "sample_id", node_color_by = "matched_celltype") +
scale_color_manual(values = metadata(sce_IMC)$color_vectors$matched_celltype) +
xlim(c(600,0)) + ylim(c(0,600)) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
panel.background = element_rect(fill = "black", colour = NA),
legend.position = "none") +
ggtitle(""))
p_4_with_legend <- plotSpatial(cur_IMC, img_id = "sample_id", node_color_by = "matched_celltype") +
scale_color_manual(values = metadata(sce_IMC)$color_vectors$matched_celltype) +
xlim(c(600,0)) + ylim(c(0,600)) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
panel.background = element_rect(fill = "black", colour = NA),
legend.position = "bottom") +
ggtitle("")
(p_1 <- plotSpatial(cur_mIF, img_id = "sample_id", node_color_by = "matched_celltype", coords = c("nucleus.x", "nucleus.y")) +
scale_color_manual(values = metadata(sce_IMC)$color_vectors$matched_celltype) +
xlim(c(600,0)) + ylim(c(0,600)) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
panel.background = element_rect(fill = "black", colour = NA),
legend.position = "none") +
ggtitle(""))
(p_6 <- plotSpatial(cur_IMC, img_id = "sample_id", node_color_by = "CD20_patches") +
scale_color_manual(values = c("252" = "red", "257" = "red")) +
xlim(c(600,0)) + ylim(c(0,600)) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
panel.background = element_rect(fill = "black", colour = NA),
legend.position = "none") +
ggtitle(""))
(p_3 <- plotSpatial(cur_mIF, img_id = "sample_id", node_color_by = "TLS.ID", coords = c("nucleus.x", "nucleus.y")) +
scale_color_manual(values = c("1" = "red")) +
xlim(c(600,0)) + ylim(c(0,600)) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
panel.background = element_rect(fill = "black", colour = NA),
legend.position = "none") +
ggtitle(""))
(p_5 <- plotSpatial(cur_IMC, img_id = "sample_id", node_color_by = "tumor_patches") +
scale_color_manual(values = c("TRUE" = "sienna", "FALSE" = "grey")) +
xlim(c(600,0)) + ylim(c(0,600))+
geom_segment(aes(x = 50, y = 50, xend = 150, yend = 50), lwd = 3, color = "white") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
panel.background = element_rect(fill = "black", colour = NA),
legend.position = "none") +
ggtitle(""))
(p_2 <- plotSpatial(cur_mIF, img_id = "sample_id", node_color_by = "tissue.type", coords = c("nucleus.x", "nucleus.y")) +
scale_color_manual(values = c("tumor" = "sienna", "stroma" = "grey"))  +
xlim(c(600,0)) + ylim(c(0,600)) +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
panel.background = element_rect(fill = "black", colour = NA),
legend.position = "none") +
ggtitle(""))
p_final <- plot_grid(p_1, p_3, p_2,p_4,p_6, p_5, nrow = 2, byrow = TRUE)
ggsave(filename = "../output/Figure_5/Figure_5A.pdf", plot = p_final, width = 15, height = 10)
ggsave(filename = "../output/Figure_5/Figure_5A_legend.pdf", plot = p_4_with_legend)
all_sce
# Prepare mIF data
cur_mIF <- sce_mIF
colData(cur_mIF) <- colData(cur_mIF)[,c("sample_id", "patient_id", "nucleus.x", "nucleus.y", "matched_celltype")]
cur_mIF$Pos_X <- cur_mIF$nucleus.x
cur_mIF$Pos_Y <- cur_mIF$nucleus.y
cur_mIF$Pos_X <- cur_mIF$Pos_X * 0.4962
cur_mIF$Pos_Y <- cur_mIF$Pos_Y * 0.4962
cur_mIF$nucleus.x <- NULL
cur_mIF$nucleus.y <- NULL
rowData(cur_mIF) <- NULL
assays(cur_mIF) <- list()
metadata(cur_mIF) <- list()
rownames(cur_mIF) <- NULL
colPairs(cur_mIF) <- NULL
cur_mIF$modality <- "mIF"
# Prepare IMC data
cur_IMC <- sce_IMC
colData(cur_IMC) <- colData(cur_IMC)[,c("sample_id", "patient_id", "matched_celltype", "Pos_X", "Pos_Y")]
rowData(cur_IMC) <- NULL
assays(cur_IMC) <- list()
metadata(cur_IMC) <- list()
rownames(cur_IMC) <- NULL
reducedDims(cur_IMC) <- NULL
colPairs(cur_IMC) <- NULL
cur_IMC$modality <- "IMC"
# Merge data
all_sce <- cbind(cur_IMC[1:6,], cur_mIF)
all_sce$sample_id_global <- paste0(all_sce$sample_id, "_", all_sce$modality)
all_sce
all_sce$sample_id
unique(all_sce$sample_id)
grepl("_004|008",unique(all_sce$sample_id))
unique(all_sce$sample_id)[grepl("_004|008",unique(all_sce$sample_id))]
unique(all_sce$sample_id)[grepl("_004|_008",unique(all_sce$sample_id))]
remove <- unique(all_sce$sample_id)[grepl("_004|_008",unique(all_sce$sample_id))]
library(spicyR)
spicyTest <- spicy(
all_sce[,!all_sce$sample_id %in% remove],
condition = "modality",
subject = "sample_id",
spatialCoords = c("Pos_X", "Pos_Y"),
window = "square",
cellType = "matched_celltype",
imageID = "sample_id_global",
Rs = c(20, 50, 100, 150)
)
(p <- signifPlot(
spicyTest, fdr = T,cutoff = 0.1
))
signifPlot(spicyTest,type = "", comparisonGroup = "IMC")
topPairs(spicyTest, adj = "fdr", cutoff = 0.1)
p
p
log2(2)
log2(0)
1/0
1/00/1
0/1
100/1
log2(100)
1/100
log2(1/100)
