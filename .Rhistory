mcols(cur_mask)[,"sample_id"] <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
cur_mask <- EBImage::as.Image(image_matrix)
cur_mask <- cytomapper::CytoImageList(cur_mask)
mcols(cur_im)[,"sample_id"] <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
names(cur_mask) <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
mcols(cur_mask)[,"sample_id"] <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
mcols(cur_mask)
mcols(cur_mask)[,"sample_id"]
mcols(cur_mask)[,"sample_id"] <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
cur_mask
cur_mask <- EBImage::as.Image(image_matrix)
cur_mask <- cytomapper::CytoImageList(cur_mask)
mcols(cur_im)[,"sample_id"] <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
cur_mask
cur_im
cur_mask
names(cur_mask) <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
cur_mask
mcols(cur_mask)[,"sample_id"] <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
mcols(cur_mas)
mcols(cur_mask)
mcols(cur_mask)$sample_id <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
cytomapper::plotPixels(mask = cur_mask, image = cur_im,img_id = "sample_id",colour_by = c("CD15", "DAPI", "CD3"),bcg = list(CD15 = c(0,2,1),
DAPI = c(0,2,1),CD3 = c(0,2,1)))
cytomapper::plotPixels(mask = cur_mask, image = cur_im,img_id = "sample_id",colour_by = c("CD15", "DNA1", "CD3"),bcg = list(CD15 = c(0,2,1),
DAPI = c(0,2,1),CD3 = c(0,2,1)))
cytomapper::plotPixels(mask = cur_mask,
image = cur_im,
img_id = "sample_id",
colour_by = c("DAPI", "CD15"),
bcg = list(DNA2 = c(0,2,1),
CD15 = c(0,1,1)),save_plot = list(filename = "D:/Data/test_IMC.png"))
cytomapper::plotPixels(mask = cur_mask,
image = cur_im,
img_id = "sample_id",
colour_by = c("DNA2", "CD15"),
bcg = list(DNA2 = c(0,2,1),
CD15 = c(0,1,1)),save_plot = list(filename = "D:/Data/test_IMC.png"))
cytomapper::plotPixels(mask = cur_mask,
image = cur_im,
img_id = "sample_id",
colour_by = c("DNA2", "CD15"),
bcg = list(DNA2 = c(0,3,1),
CD15 = c(0,1,1)),save_plot = list(filename = "D:/Data/test_IMC.png"))
IMC_images <- readRDS("O:/projects/immucan/processed_data/Panel_1/2022_WORKFLOW/mIF/old/steinbock/Rout/images.rds")
mif_st_images <- readRDS("O:/projects/immucan/processed_data/Panel_1/2022_WORKFLOW/mIF/old/steinbock/Rout/images.rds")
cur_sce <- mif_steinbock[,mif_steinbock$sample_id == "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"]
cur_im <- cytomapper::getImages(mif_st_images,i = 2)
cur_sce
cur_sce <- sce_IMC[,sce_IMC$sample_id == "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"]
cur_sce
cur_sce <- mif_steinbock[,mif_steinbock$sample_id == "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"]
cur_im$`IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002`
width <- 1198
height <- 1196
# Create an empty matrix filled with zeros
image_matrix <- matrix(0, nrow = width, ncol = height)
# Example: Define x and y coordinates as a matrix
# Replace this with your actual x, y coordinate matrix
xy_coords <- as.matrix(data.frame(x = round(cur_sce$Pos_X),
y = round(cur_sce$Pos_Y)))
# Assign running numbers to these specific pixels
for (i in 1:nrow(xy_coords)) {
x <- xy_coords[i, 1]
y <- xy_coords[i, 2]
# Ensure coordinates are within bounds
image_matrix[x, y] <- 1  # Running number
}
cur_mask <- EBImage::as.Image(image_matrix)
cur_mask <- cytomapper::CytoImageList(cur_mask)
mcols(cur_im)[,"sample_id"] <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
names(cur_mask) <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
mcols(cur_mask)$sample_id <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
cytomapper::plotPixels(mask = cur_mask, image = cur_im,img_id = "sample_id",colour_by = c("CD15", "DAPI", "CD3"),bcg = list(CD15 = c(0,2,1),
DAPI = c(0,2,1),CD3 = c(0,2,1)))
cytomapper::plotPixels(mask = cur_mask,
image = cur_im,
img_id = "sample_id",
colour_by = c("DNA2", "CD15"),
bcg = list(DNA2 = c(0,3,1),
CD15 = c(0,1,1)),save_plot = list(filename = "D:/Data/test_mIF_steinbock.png"))
cytomapper::plotPixels(mask = cur_mask,
image = cur_im,
img_id = "sample_id",
colour_by = c("DAPI", "CD15"),
bcg = list(DAPI = c(0,3,1),
CD15 = c(0,1,1)),save_plot = list(filename = "D:/Data/test_mIF_steinbock.png"))
cytomapper::plotPixels(mask = cur_mask,
image = cur_im,
img_id = "sample_id",
colour_by = c("DAPI", "CD15"),
bcg = list(DAPI = c(0,1,1),
CD15 = c(0,1,1)),save_plot = list(filename = "D:/Data/test_mIF_steinbock.png"))
cytomapper::plotPixels(mask = cur_mask,
image = cur_im,
img_id = "sample_id",
colour_by = c("DAPI", "CD15"),
bcg = list(DAPI = c(0,0.3,1),
CD15 = c(0,1,1)),save_plot = list(filename = "D:/Data/test_mIF_steinbock.png"))
cytomapper::plotPixels(mask = cur_mask,
image = cur_im,
img_id = "sample_id",
colour_by = c("DAPI", "CD15"),
bcg = list(DAPI = c(0,0.8,1),
CD15 = c(0,1,1)),save_plot = list(filename = "D:/Data/test_mIF_steinbock.png"))
cur_sce
mif_images <- readRDS("D:/Data/2022_Workflow_for_zenodo_upload/mIF/Rout/images.rds")
cur_im <- cytomapper::getImages(mif_images,i = 2)
cur_sce <- sce_mIF[,sce_mIF$sample_id == "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"]
cur_sce
mif_images <- readRDS("D:/Data/2022_Workflow_for_zenodo_upload/mIF/Rout/images.rds")
cur_im <- cytomapper::getImages(mif_images,i = 2)
cur_sce <- sce_mIF[,sce_mIF$sample_id == "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"]
# Load necessary library
library(tiff)
# Define image dimensions
width <- 1198
height <- 1196
# Create an empty matrix filled with zeros
image_matrix <- matrix(0, nrow = width, ncol = height)
# Example: Define x and y coordinates as a matrix
# Replace this with your actual x, y coordinate matrix
xy_coords <- as.matrix(data.frame(x = round(cur_sce$Pos_X),
y = round(cur_sce$Pos_Y)))
# Example: Define x and y coordinates as a matrix
# Replace this with your actual x, y coordinate matrix
xy_coords <- as.matrix(data.frame(x = round(cur_sce$nucleus.x),
y = round(cur_sce$nucleus.y)))
# Assign running numbers to these specific pixels
for (i in 1:nrow(xy_coords)) {
x <- xy_coords[i, 1]
y <- xy_coords[i, 2]
# Ensure coordinates are within bounds
image_matrix[x, y] <- 1  # Running number
}
# Assign running numbers to these specific pixels
for (i in 1:nrow(xy_coords)) {
x <- xy_coords[i, 1]
y <- xy_coords[i, 2]
# Ensure coordinates are within bounds
image_matrix[x, y] <- 1  # Running number
}
cur_mask <- EBImage::as.Image(image_matrix)
cur_mask <- cytomapper::CytoImageList(cur_mask)
mcols(cur_im)[,"sample_id"] <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
names(cur_mask) <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
mcols(cur_mask)$sample_id <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
cytomapper::plotPixels(mask = cur_mask,
image = cur_im,
img_id = "sample_id",
colour_by = c("DAPI", "CD15"),
bcg = list(DAPI = c(0,1,1),
CD15 = c(0,1,1)),save_plot = list(filename = "D:/Data/test_mIF.png"))
IMC_images <- readRDS("D:/Data/2022_Workflow_for_zenodo_upload/IMC/Rout/images.rds")
cur_im <- cytomapper::getImages(IMC_images,i = 2)
cur_sce <- sce_IMC[,sce_IMC$sample_id == "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"]
# Load necessary library
library(tiff)
# Define image dimensions
width <- 600
height <- 599
# Create an empty matrix filled with zeros
image_matrix <- matrix(0, nrow = width, ncol = height)
# Example: Define x and y coordinates as a matrix
# Replace this with your actual x, y coordinate matrix
xy_coords <- as.matrix(data.frame(x = round(cur_sce$Pos_X),
y = round(cur_sce$Pos_Y)))
# Assign running numbers to these specific pixels
for (i in 1:nrow(xy_coords)) {
x <- xy_coords[i, 1]
y <- xy_coords[i, 2]
# Ensure coordinates are within bounds
image_matrix[x, y] <- 1  # Running number
}
cur_mask <- EBImage::as.Image(image_matrix)
cur_mask <- cytomapper::CytoImageList(cur_mask)
mcols(cur_im)[,"sample_id"] <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
names(cur_mask) <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
mcols(cur_mask)$sample_id <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
cytomapper::plotPixels(mask = cur_mask, image = cur_im,img_id = "sample_id",colour_by = c("CD15", "DNA1", "CD3"),bcg = list(CD15 = c(0,2,1),
DAPI = c(0,2,1),CD3 = c(0,2,1)))
cytomapper::plotPixels(mask = cur_mask,
image = cur_im,
img_id = "sample_id",
colour_by = c("DNA2", "CD15"),
bcg = list(DNA2 = c(0,3,1),
CD15 = c(0,1,1)),save_plot = list(filename = "D:/Data/test_IMC.png"))
mif_st_images <- readRDS("O:/projects/immucan/processed_data/Panel_1/2022_WORKFLOW/mIF/old/steinbock/Rout/images.rds")
cur_im <- cytomapper::getImages(mif_st_images,i = 2)
cur_sce <- mif_steinbock[,mif_steinbock$sample_id == "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"]
# Load necessary library
library(tiff)
# Define image dimensions
width <- 1198
height <- 1196
# Create an empty matrix filled with zeros
image_matrix <- matrix(0, nrow = width, ncol = height)
# Example: Define x and y coordinates as a matrix
# Replace this with your actual x, y coordinate matrix
xy_coords <- as.matrix(data.frame(x = round(cur_sce$Pos_X),
y = round(cur_sce$Pos_Y)))
# Assign running numbers to these specific pixels
for (i in 1:nrow(xy_coords)) {
x <- xy_coords[i, 1]
y <- xy_coords[i, 2]
# Ensure coordinates are within bounds
image_matrix[x, y] <- 1  # Running number
}
cur_mask <- EBImage::as.Image(image_matrix)
cur_mask <- cytomapper::CytoImageList(cur_mask)
mcols(cur_im)[,"sample_id"] <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
names(cur_mask) <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
mcols(cur_mask)$sample_id <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
cytomapper::plotPixels(mask = cur_mask, image = cur_im,img_id = "sample_id",colour_by = c("CD15", "DAPI", "CD3"),bcg = list(CD15 = c(0,2,1),
DAPI = c(0,2,1),CD3 = c(0,2,1)))
cytomapper::plotPixels(mask = cur_mask,
image = cur_im,
img_id = "sample_id",
colour_by = c("DAPI", "CD15"),
bcg = list(DAPI = c(0,0.8,1),
CD15 = c(0,1,1)),save_plot = list(filename = "D:/Data/test_mIF_steinbock.png"))
IMC_images <- readRDS("D:/Data/2022_Workflow_for_zenodo_upload/IMC/Rout/images.rds")
cur_im <- cytomapper::getImages(IMC_images,i = 2)
cur_sce <- sce_IMC[,sce_IMC$sample_id == "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"]
# Load necessary library
library(tiff)
# Define image dimensions
width <- 600
height <- 599
# Create an empty matrix filled with zeros
image_matrix <- matrix(0, nrow = width, ncol = height)
# Example: Define x and y coordinates as a matrix
# Replace this with your actual x, y coordinate matrix
xy_coords <- as.matrix(data.frame(x = round(cur_sce$Pos_X),
y = round(cur_sce$Pos_Y)))
# Assign running numbers to these specific pixels
for (i in 1:nrow(xy_coords)) {
x <- xy_coords[i, 1]
y <- xy_coords[i, 2]
# Ensure coordinates are within bounds
image_matrix[x, y] <- 1  # Running number
}
cur_mask <- EBImage::as.Image(image_matrix)
cur_mask <- cytomapper::CytoImageList(cur_mask)
mcols(cur_im)[,"sample_id"] <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
names(cur_mask) <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
mcols(cur_mask)$sample_id <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
cytomapper::plotPixels(mask = cur_mask, image = cur_im,img_id = "sample_id",colour_by = c("CD15", "DNA1", "CD3"),bcg = list(CD15 = c(0,2,1),
DAPI = c(0,2,1),CD3 = c(0,2,1)))
cytomapper::plotPixels(mask = cur_mask,
image = cur_im,
img_id = "sample_id",
colour_by = c("DNA2", "CD15"),
bcg = list(DNA2 = c(0,2.5,1),
CD15 = c(0,1.5,1)),save_plot = list(filename = "D:/Data/test_IMC.png"))
sce_mIF[,sce_mIF < 28]
sce_mIF
sce_mIF[,sce_mIF$cell.area < 28]
no_IMC <- colData(sce_IMC) %>% as_tibble() %>%
group_by(sample_id, patient_id) %>%
summarize(count = n())
# filter small cells
mif_steinbock <- mif_steinbock[,mif_steinbock$area > 28]
no_mIF <- colData(sce_mIF) %>% as_tibble() %>%
group_by(sample_id, patient_id) %>%
summarize(count = n())
no_mIF_steinbock <- colData(mif_steinbock) %>% as_tibble() %>%
group_by(sample_id, patient_id) %>%
summarize(count = n())
combined_df <- left_join(combined_df, no_mIF_steinbock, by = c("sample_id", "patient_id"))
combined_df$patient_id <- sub("-", "", str_extract(combined_df$sample_id, "[0-9]{8}-"))
p <- ggplot(combined_df) +
geom_point(aes(count.x, count.y, color = patient_id), size = 2) +
geom_abline(slope = 1, intercept = 0, color = "dark red") +
geom_smooth(aes(count.x, count.y), method='lm', formula= y~x, fullrange=TRUE) +
theme_minimal(base_size = 20) + xlab("# Cells in IMC") + ylab("# Cells in mIF") +
coord_fixed() +
ylim(c(0, 5000)) + xlim(c(0, 5000)) +
scale_color_manual(values = metadata(sce_IMC)$color_vectors$patient_id, name = "Patient ID")
p
combined_df
combined_df <- left_join(no_IMC, no_mIF, by = c("sample_id", "patient_id"))
combined_df
combined_df <- left_join(no_IMC, no_mIF, by = c("sample_id", "patient_id"))
combined_df <- left_join(combined_df, no_mIF_steinbock, by = c("sample_id", "patient_id"))
combined_df$patient_id <- sub("-", "", str_extract(combined_df$sample_id, "[0-9]{8}-"))
p2 <- ggplot(combined_df) +
geom_point(aes(count.x, count, color = patient_id), size = 2) +
geom_abline(slope = 1, intercept = 0, color = "dark red") +
geom_smooth(aes(count.x, count.y), method='lm', formula= y~x, fullrange=TRUE) +
theme_minimal(base_size = 20) + xlab("# Cells in IMC") + ylab("# Cells in mIF steinbock") +
coord_fixed() +
ylim(c(0, 5000)) + xlim(c(0, 5000)) +
scale_color_manual(values = metadata(sce_IMC)$color_vectors$patient_id, name = "Patient ID")
p1
p1 <- ggplot(combined_df) +
geom_point(aes(count.x, count.y, color = patient_id), size = 2) +
geom_abline(slope = 1, intercept = 0, color = "dark red") +
geom_smooth(aes(count.x, count.y), method='lm', formula= y~x, fullrange=TRUE) +
theme_minimal(base_size = 20) + xlab("# Cells in IMC") + ylab("# Cells in mIF") +
coord_fixed() +
ylim(c(0, 5000)) + xlim(c(0, 5000)) +
scale_color_manual(values = metadata(sce_IMC)$color_vectors$patient_id, name = "Patient ID")
p1
p2
p2 <- ggplot(combined_df) +
geom_point(aes(count.x, count, color = patient_id), size = 2) +
geom_abline(slope = 1, intercept = 0, color = "dark red") +
geom_smooth(aes(count.x, count), method='lm', formula= y~x, fullrange=TRUE) +
theme_minimal(base_size = 20) + xlab("# Cells in IMC") + ylab("# Cells in mIF steinbock") +
coord_fixed() +
ylim(c(0, 5000)) + xlim(c(0, 5000)) +
scale_color_manual(values = metadata(sce_IMC)$color_vectors$patient_id, name = "Patient ID")
p1
p2
output
ggsave(filename = "IMC_mIF_celltype_count.pdf",path = output, plot = p1, width = 10, height = 7)
ggsave(filename = "IMC_mIF-steinbock_celltype_count.pdf",path = output, plot = p2, width = 10, height = 7)
IMC_dat <- data.frame(IMC_cell_size = sce_IMC$area)
mIF_dat <- data.frame(IF_cell_size = sce_mIF$cell.area)
mIF_steinbock_dat <- data.frame(IF_cell_size = mif_steinbock$area)
# correct for difference in resolution: one pixel in mIF is 0.4962µm
mIF_dat$IF_cell_size <- mIF_dat$IF_cell_size*0.4962^2
mIF_steinbock_dat$IF_cell_size <- mIF_steinbock_dat$IF_cell_size*0.4962^2
mean_IMC <- mean(cur_dat$IMC_cell_size)
mean_IF <- mean(mIF_dat$IF_cell_size )
mean_IF_steinbock <- mean(mIF_steinbock_dat$IF_cell_size)
cur_dat <- data.frame(IMC_cell_size = sce_IMC$area)
mean_IMC <- mean(cur_dat$IMC_cell_size)
mean_IF <- mean(sce_mIF$cell.area)
p <- cur_dat %>%
ggplot(aes(y= IMC_cell_size))+
geom_density(col= "blue", size = 2)+
coord_flip()+
theme_bw()+
geom_density(data = mIF_dat ,aes(y = IF_cell_size),col= "red", size = 2)+
geom_density(data = mIF_steinbock_dat ,aes(y = IF_cell_size),col= "green", size = 2)+
annotate("text", x = 0.02, y = 392 , label = expression( paste("IMC, mean = 78 µm"^2)), color = "blue", size = 5)+
annotate("text", x = 0.022, y = 400 , label = expression( paste("mIF, mean = 149 µm"^2)), color = "red", size = 5)+
annotate("text", x = 0.024, y = 400 , label = expression( paste("mIF, mean = 217 µm"^2)), color = "green", size = 5)+
ylab("cell size")+
xlab("density estimate")
p
mean_IMC
mean_IF
mean_IF_steinbock
mean(mIF_dat$IF_cell_size )
mean(mIF_steinbock_dat$IF_cell_size)
p <- cur_dat %>%
ggplot(aes(y= IMC_cell_size))+
geom_density(col= "blue", size = 2)+
coord_flip()+
theme_bw()+
geom_density(data = mIF_dat ,aes(y = IF_cell_size),col= "red", size = 2)+
geom_density(data = mIF_steinbock_dat ,aes(y = IF_cell_size),col= "green", size = 2)+
annotate("text", x = 0.02, y = 392 , label = expression( paste("IMC, mean = 78 µm"^2)), color = "blue", size = 5)+
annotate("text", x = 0.022, y = 400 , label = expression( paste("mIF, mean = 37 µm"^2)), color = "red", size = 5)+
annotate("text", x = 0.024, y = 400 , label = expression( paste("mIF, mean = 55 µm"^2)), color = "green", size = 5)+
ylab("cell size")+
xlab("density estimate")
p
ggsave(filename = "FigS5_B.pdf",path= output, plot = p, width = 7, height = 5)
p <- cur_dat %>%
ggplot(aes(y= IMC_cell_size))+
geom_density(col= "blue", size = 2)+
coord_flip()+
theme_bw()+
geom_density(data = mIF_dat ,aes(y = IF_cell_size),col= "red", size = 2)+
geom_density(data = mIF_steinbock_dat ,aes(y = IF_cell_size),col= "green", size = 2)+
annotate("text", x = 0.02, y = 392 , label = expression( paste("IMC, mean = 78 µm"^2)), color = "blue", size = 5)+
annotate("text", x = 0.022, y = 400 , label = expression( paste("mIF, mean = 37 µm"^2)), color = "red", size = 5)+
annotate("text", x = 0.024, y = 400 , label = expression( paste("mIF steinbock, mean = 55 µm"^2)), color = "green", size = 5)+
ylab("cell size")+
xlab("density estimate")
p
ggsave(filename = "FigS5_B.pdf",path= output, plot = p, width = 7, height = 5)
mif_images <- readRDS("D:/Data/2022_Workflow_for_zenodo_upload/mIF/Rout/images.rds")
cur_im <- cytomapper::getImages(mif_images,i = 2)
cur_sce <- sce_mIF[,sce_mIF$sample_id == "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"]
# Load necessary library
library(tiff)
# Define image dimensions
width <- 1198
height <- 1196
# Create an empty matrix filled with zeros
image_matrix <- matrix(0, nrow = width, ncol = height)
# Example: Define x and y coordinates as a matrix
# Replace this with your actual x, y coordinate matrix
xy_coords <- as.matrix(data.frame(x = round(cur_sce$nucleus.x),
y = round(cur_sce$nucleus.y)))
# Assign running numbers to these specific pixels
for (i in 1:nrow(xy_coords)) {
x <- xy_coords[i, 1]
y <- xy_coords[i, 2]
# Ensure coordinates are within bounds
image_matrix[x, y] <- 1  # Running number
}
cur_mask <- EBImage::as.Image(image_matrix)
cur_mask <- cytomapper::CytoImageList(cur_mask)
mcols(cur_im)[,"sample_id"] <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
names(cur_mask) <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
mcols(cur_mask)$sample_id <- "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_002"
cytomapper::plotPixels(mask = cur_mask,
image = cur_im,
img_id = "sample_id",
colour_by = c("DAPI", "CD15"),
bcg = list(DAPI = c(0,1.5,1),
CD15 = c(0,1,1)),save_plot = list(filename = "D:/Data/test_mIF.png"))
mif_dat <- colData(sce_mIF)
imc_dat <- colData(sce_IMC)
mif_dat
imc_dat %>%
group_by(sample_id) %>%
count(matched_celltype)
imc_dat %>%
group_by(sample_id)
imc_dat <- as.data.frame(colData(sce_IMC))
mif_dat <- as.data.frame(colData(sce_mIF))
imc_dat %>%
group_by(sample_id) %>%
count(matched_celltype)
imc_dat %>%
group_by(sample_id) %>%
count(matched_celltype) %>%
mutate(tech = "IMC")
imc_dat <- imc_dat %>%
group_by(sample_id) %>%
count(matched_celltype) %>%
mutate(tech = "IMC")
mif_dat <- mif_dat %>%
group_by(sample_id) %>%
count(matched_celltype) %>%
mutate(tech = "mif")
mif_dat
dat <- left_join(imc_dat,mif_dat,"sample_id")
dat
dat <- left_join(imc_dat,mif_dat,c("sample_id","matched_celltype"))
dat
colnames(dat) <- c("sample_id","matched_celltype","imc_count","tech_imc","mif_count","tech_mif")
dat
dat %>%
pivot_longer(cols = c(imc_count,mif_count))
dat %>%
pivot_longer(cols = c(imc_count,mif_count)) %>%
ggplot(aes(x = name,y = value,color = matched_celltype))+
geom_point()+
facet_wrap(.~matched_celltype)
dat
dat %>%
pivot_longer(cols = c(imc_count,mif_count)) %>%
ggplot(aes(x = imc_count,y = mif_count,color = matched_celltype))+
geom_point()+
facet_wrap(.~matched_celltype)
dat %>%
#  pivot_longer(cols = c(imc_count,mif_count)) %>%
ggplot(aes(x = imc_count,y = mif_count,color = matched_celltype))+
geom_point()+
facet_wrap(.~matched_celltype)
dat %>%
#  pivot_longer(cols = c(imc_count,mif_count)) %>%
ggplot(aes(x = imc_count,y = mif_count,color = matched_celltype))+
geom_point()+
facet_wrap(.~matched_celltype, scales = "free")
ggplot(dat) +
stat_smooth(aes(imc_count, mif_count, color = matched_celltype), alpha = 0.5, se = FALSE, method='lm', formula = y~x, fullrange=FALSE, geom = "line", lwd = 1.5) +
geom_smooth(aes(imc_count, mif_count), se = TRUE, method='lm', formula = y~x, fullrange=TRUE, lwd = 1.5) +
geom_point(aes(imc_count, mif_count, color = patient_id), size = 3) +
geom_abline(slope = 1, intercept = 0, color = "dark red", lwd = 1.5) +
theme_classic(base_size = 20) + xlab("") + ylab("") +
scale_color_manual(values = c(metadata(sce_imc)$color_vectors$ROIs, metadata(sce_imc)$color_vectors$patient_id)) +
ylim(c(0, 0.4)) + xlim(c(0, 0.4)) +
stat_regline_equation(aes(imc_count, mif_count, label = ..eq.label..), label.x.npc = 0, label.y.npc = 1, size = 10) +
stat_regline_equation(aes(imc_count, mif_count, label = ..rr.label..), label.x.npc = 0, label.y.npc = 0.9, size = 10) +
theme(legend.position = "none",
axis.text = element_text(size = 20)) +
ggtitle("BnT cells") +
coord_fixed()
ggplot(dat) +
stat_smooth(aes(imc_count, mif_count, color = matched_celltype), alpha = 0.5, se = FALSE, method='lm', formula = y~x, fullrange=FALSE, geom = "line", lwd = 1.5) +
geom_smooth(aes(imc_count, mif_count), se = TRUE, method='lm', formula = y~x, fullrange=TRUE, lwd = 1.5) +
geom_point(aes(imc_count, mif_count, color = patient_id), size = 3) +
geom_abline(slope = 1, intercept = 0, color = "dark red", lwd = 1.5) +
theme_classic(base_size = 20) + xlab("") + ylab("") +
ylim(c(0, 0.4)) + xlim(c(0, 0.4)) +
stat_regline_equation(aes(imc_count, mif_count, label = ..eq.label..), label.x.npc = 0, label.y.npc = 1, size = 10) +
stat_regline_equation(aes(imc_count, mif_count, label = ..rr.label..), label.x.npc = 0, label.y.npc = 0.9, size = 10) +
theme(legend.position = "none",
axis.text = element_text(size = 20)) +
ggtitle("BnT cells") +
coord_fixed()
ggplot(dat) +
stat_smooth(aes(imc_count, mif_count, color = matched_celltype), alpha = 0.5, se = FALSE, method='lm', formula = y~x, fullrange=FALSE, geom = "line", lwd = 1.5) +
geom_smooth(aes(imc_count, mif_count), se = TRUE, method='lm', formula = y~x, fullrange=TRUE, lwd = 1.5) +
geom_point(aes(imc_count, mif_count, color = matched_celltype), size = 3) +
geom_abline(slope = 1, intercept = 0, color = "dark red", lwd = 1.5) +
theme_classic(base_size = 20) + xlab("") + ylab("") +
ylim(c(0, 0.4)) + xlim(c(0, 0.4)) +
stat_regline_equation(aes(imc_count, mif_count, label = ..eq.label..), label.x.npc = 0, label.y.npc = 1, size = 10) +
stat_regline_equation(aes(imc_count, mif_count, label = ..rr.label..), label.x.npc = 0, label.y.npc = 0.9, size = 10) +
theme(legend.position = "none",
axis.text = element_text(size = 20)) +
ggtitle("BnT cells") +
coord_fixed()
ggplot(dat) +
stat_smooth(aes(imc_count, mif_count, color = matched_celltype), alpha = 0.5, se = FALSE, method='lm', formula = y~x, fullrange=FALSE, geom = "line", lwd = 1.5) +
geom_smooth(aes(imc_count, mif_count), se = TRUE, method='lm', formula = y~x, fullrange=TRUE, lwd = 1.5) +
geom_point(aes(imc_count, mif_count, color = matched_celltype), size = 3)
dat %>%
#  pivot_longer(cols = c(imc_count,mif_count)) %>%
ggplot(aes(x = imc_count,y = mif_count,color = matched_celltype))+
geom_point()+
facet_wrap(.~matched_celltype, scales = "free")
