p
p <- cur_dat %>%
ggplot(aes(y= IMC_cell_size))+
geom_density(col= "blue", size = 2)+
coord_flip()+
theme_bw()+
geom_density(data = mIF_dat ,aes(y = IF_cell_size),col= "red", size = 2)+
geom_density(data = mIF_steinbock_dat ,aes(y = IF_cell_size),col= "green", size = 2)+
annotate("text", x = 0.02, y = 392 , label = bquote("IMC: average" ~ .(round(mean_IMC)) ~  µm^2), color = "blue", size = 5)+
annotate("text", x = 0.022, y = 400 , label =  bquote("mIF: average" ~ .(round(mean_IF)) ~  µm^2), color = "red", size = 5)+
annotate("text", x = 0.024, y = 400 , label =bquote("mIF steinbock: average" ~ .(round(mean_IF_steinbock)) ~  µm^2), color = "green", size = 5)+
ylab("cell size")+
xlab("density estimate")
p
pi*3
r <- sqrt(area/pi)
area <- 150
r <- sqrt(area/pi)
r
area <- 78
r <- sqrt(area/pi)
(r) <- sqrt(area/pi)
(r) <- sqrt(area/pi)
r <- sqrt(area/pi)
r
mean(sce_IMC$major_axis_length)
mean(sce_IMC$minor_axis_length)
mean(sce_IMC$area)
unique(sce_mIF$sample_id)
cur_sce <- sce_mIF[,sce_mIF$sample_id == "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_001"]
max(cur_sce$nucleus.x)
max(cur_sce$nucleus.y)
cur_sce_2 <- sce_IMC[,sce_IMC$sample_id == "IMMUcan_2022_WFLOW_10061074-SPECT-VAR-TIS-01-IMC-01_001"]
cur_sce_2$width_px
cur_sce_2$height_px
cur_sce$cell.area
sum(cur_sce$cell.area)
plotSpatial(cur_sce,img_id = "sample_id",coords = c("nucleus.x","nucleux.y"),node_color_by = "matched_celltype")
plotSpatial(cur_sce,img_id = "sample_id",coords = c("nucleus.x","nucleus.y"),node_color_by = "matched_celltype")
sum(cur_sce_2$area)
plotSpatial(cur_sce_2,img_id = "sample_id",coords = c("nucleus.x","nucleus.y"),node_color_by = "matched_celltype")
plotSpatial(cur_sce_2,img_id = "sample_id",node_color_by = "matched_celltype")
600*600
p
ggsave(filename = "FigS5_B.pdf",path= output, plot = p, width = 7, height = 5)
mount_path <- readRDS(file = "data/mount_path.rds")
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
mount_path <- readRDS(file = "data/mount_path.rds")
output <- "output/Figure_S5"
ggsave(filename = "FigS5_B.pdf",path= output, plot = p, width = 7, height = 5)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
library(tidyverse)
library(ggplot2)
library(pals)
library(SingleCellExperiment)
dat <- data.frame(method = c("XGB","RF","MLP","LR","Stellar","Celesta","Astir","StarlingLR","Starling"),
MacroF1 = c(0.903,0.893,0.891,0.847,.844,.388,.345,.227,.163))
cols <-tol(n=9)
names(cols) <- dat$method
p <- dat %>%
ggplot(aes(x = factor(method, levels = dat$method),y = MacroF1,fill = method))+
geom_bar(stat = "identity")+
scale_fill_manual(values = cols)+
theme_bw()+
xlab("Method")+
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1))
p
ggsave(plot = p,filename =  "output/Figure_6/Benchmark.pdf",device = "pdf",width = 5,height = 3)
XGB <- read_tsv("D:/Git/IMC-models/models/Baselines/xgb_predictions.tsv")
RF <- read_tsv("D:/Git/IMC-models/models/Baselines/rf_predictions.tsv")
MLP <- read_tsv("D:/Git/IMC-models/models/Baselines/mlp_predictions.tsv")
LR <- read_tsv("D:/Git/IMC-models/models/Baselines/logreg_predictions.tsv")
Stellar <- read_tsv("D:/Git/IMC-models/models/Stellar/stellar_predictions.tsv")
Celesta <- read_csv("D:/Git/IMC-models/models/Celesta/celesta_predictions.csv")
Astir <- read_tsv("D:/Git/IMC-models/models/Astir/astir_predictions.tsv")
Astir <- Astir %>%
mutate(predicted_label = ifelse(predicted_label == "Other","Unknown",predicted_label))
StarlingLR <- read_tsv("D:/Git/IMC-models/models/Starling/starling-lr_predictions.tsv")
Starling <- read_tsv("D:/Git/IMC-models/models/Starling/starling_predictions.tsv")
dat <- list(XGB,RF,MLP,LR,Stellar,Celesta,Astir,StarlingLR,Starling)
names(dat) <- c("XGB","RF","MLP","LR","Stellar","Celesta","Astir","StarlingLR","Starling")
lapply(dat, colnames)
dat <- lapply(dat, function(x){
x <- x[,c("predicted_label","true_label")]
return(x)
})
# get confusion matrices
library(caret)
# here we define all possible names that the cell types have
all_levels <- unique(unlist(lapply(dat,function(x){
x$predicted_label
})))
cms <- lapply(dat, function(x){
cm <- confusionMatrix(data = factor(x$predicted_label, levels = all_levels), reference = factor(x$true_label, levels = all_levels), mode = "everything")
y <- as.data.frame(cm$byClass)
return(y)
})
# add the column for the method
dat <- imap(cms, ~ mutate(.x, method = .y))
cur_dat <- do.call(rbind,dat)
cur_dat <- cur_dat %>%
mutate(cell_type = str_split_i(rownames(cur_dat),": ",2))
p1<- cur_dat %>%
ggplot(aes(x = cell_type,y = 1- Specificity)) +
geom_boxplot(outliers = FALSE)+
geom_jitter(aes(x = cell_type,y = 1- Specificity, col= method),position = position_jitter(width = .2) ,size= 2)+
scale_color_manual(values = cols)+
theme_bw()+
coord_flip()+
ylab("FPR")
p2 <- cur_dat %>%
ggplot(aes(x = cell_type,y = Sensitivity)) +
geom_boxplot(outliers = FALSE)+
geom_jitter(aes(x = cell_type,y = Sensitivity, col= method), position = position_jitter(width = .2), size= 2)+
scale_color_manual(values = cols)+
theme_bw()+
theme(legend.position = "none")+
coord_flip()+
ylab("TPR")
p<- cowplot::plot_grid(p2,p1, rel_widths = c(1,1.3))
p
ggsave(filename = "output/Figure_6/TPR_and_FPR.pdf",
plot = p,
device = "pdf",
width = 6,
height = 4)
sce <- readRDS("D:/Data/2022_Workflow_for_zenodo_upload/IMC/Rout/sce.rds")
table(sce$celltype)
markers <- list()
# we will not subcluters "uncertain" cells as the merging will be very difficult. we may inspect this at a later time point again
#functional markers for T cells
markers[["CD4"]] <- rownames(sce)[grepl(pattern = "CD27|LAG3|PD1|CD7|GrzB|ICOS|Ki67|TCF7|CD45RA|CD45RO",rownames(sce))]
markers[["CD8"]] <- rownames(sce)[grepl(pattern = "CD27|LAG3|PD1|CD7|GrzB|ICOS|Ki67|TCF7|CD45RA|CD45RO",rownames(sce))]
markers[["Treg"]] <- rownames(sce)[grepl(pattern = "CD27|LAG3|ICOS|Ki67|TCF7",rownames(sce))]
# B and BnT cell markers
markers[["BnT"]] <- rownames(sce)[grepl(pattern = "CD8|CD4|CD27|CD45RA|CD45RO|LAG3|PD1|CD7|GrzB|FOXP3|ICOS|Ki67|TCF7",rownames(sce))]
markers[["B"]] <- rownames(sce)[grepl(pattern = "CD27|CD40|Ki67",rownames(sce))]
# myeloid markers
markers[["MacCD163"]] <- rownames(sce)[grepl(pattern = "CD68|CD11c|PDL1|VISTA|CD40|CD14|CD206|Ido1|CD16",rownames(sce))]
# we will also use CD20 for DCs to detect those DCs that sit in TLS
markers[["DC"]] <- rownames(sce)[grepl(pattern = "PDL1|VISTA|CD40|Ido1|CD20|CD206|CD16|Ki67",rownames(sce))]
# we will also use E-cad for HLADR cells as there may still be tumor cells in these cells
markers[["HLADR"]] <- rownames(sce)[grepl(pattern = "CD11b|CD163|CD68|CD11c|PDL1|ICOS|VISTA|TIM3|CD40|CD14|CD206|CD163|HLADR|Ecad",rownames(sce))]
# NK markers
markers[["NK"]] <- rownames(sce)[grepl(pattern = "CD7|GrzB|CD16|CD45RA|CD45RO",rownames(sce))]
# Neutrophil markers
markers[["Neutrophil"]] <- rownames(sce)[grepl(pattern = "MPO|PDL1|VISTA",rownames(sce))]
# pDC markers
markers[["pDC"]] <- rownames(sce)[grepl(pattern = "CD303|CD4|GrzB|CD45RA|CD45RO|CD27",rownames(sce))]
# Plasma cell markers
markers[["plasma"]] <- rownames(sce)[grepl(pattern = "CD38|TCF7|CD27|CD45RA|CD45RO|",rownames(sce))]
# stroma markers
markers[["Mural"]] <- rownames(sce)[grepl(pattern = "PDGFR|SMA",rownames(sce))]
# tumor markers
markers[["Tumor"]] <- rownames(sce)[grepl(pattern = "HLADR|CarbonicAnhydrase|cleavedPARP|PDL1|IDO1|CD15|Ki67|Ido|B2M",rownames(sce))]
good_markers <- rownames(sce)[!grepl("DNA|Histone",rownames(sce))]
dittoSeq::dittoDimPlot(sce,reduction.use = "UMAP",var = "celltype")+
scale_color_manual(values = metadata(sce)$color_vectors$celltype)
library(scran)
library(scater)
library(bluster)
param <- data.frame(celltype = c("CD4", "BnT","CD8","DC","MacCD163"),
k = c(40L,50L, 40L, 40L, 50L),
type = "rank")
# clustering
cur_sces <- lapply(param$celltype, function(x){
cur_sce <- sce[,sce$celltype %in% x]
set.seed(220620)
clusters <- clusterCells(cur_sce[markers[[x]],],
assay.type = "exprs",
BLUSPARAM = SNNGraphParam(k=param[param$celltype == x,"k"],
cluster.fun = "louvain",
type = param[param$celltype == x,"type"]))
cur_sce$cluster <- paste0(x,"_",clusters)
cur_sce <-  runUMAP(cur_sce, subset_row =markers[[x]], exprs_values = "exprs",name = "UMAP_subcluster")
return(cur_sce)
})
names(cur_sces) <- param$celltype
for(i in 1:5){
print(dittoSeq::dittoDimPlot(cur_sces[[i]],var = "cluster",reduction.use = "UMAP_subcluster"))
}
for(i in param$celltype){
mean_sce <- aggregateAcrossCells(cur_sces[[i]],
ids = cur_sces[[i]]$cluster,
statistics = "mean")
assay(mean_sce, "exprs") <- asinh(counts(mean_sce))
colnames(mean_sce) <- mean_sce$cluster
print(dittoSeq::dittoHeatmap(mean_sce,
annot.by = "cluster",
genes = markers[[i]],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101)))
}
cur_sces <- lapply(cur_sces, function(x){
reducedDim(x, "UMAP_subcluster") <- NULL
return(x)
})
sce_2 <- do.call(cbind, cur_sces)
sce$cluster <- NA
sce <- sce[,!sce$celltype %in% c("CD4","BnT","CD8","DC","MacCD163")]
sce <- cbind(sce,sce_2)
sce[,is.na(sce$cluster)]$cluster <- sce[,is.na(sce$cluster)]$celltype
ct <- unique(sce$cluster)
ct <- c(ct[1:10],c("CD4_other","CD4_cycling","CD4_all_low","CD4_eff","CD4_cm","CD4_act","CD8_cm","BnT","BnT","CD4_fh","B_act","CD4_cm","CD4_cm","CD8_stem-like","CD8_pre-ex","CD8_ex","CD8_all_low","CD8_other","DC_suppressive", "DC_other","DC_cycling","DC_CD206","GCDC", "DC_all_low","Mac_suppressive","Mac_CD14high","Mac_CD206","Mac_other","Mac_PDL1", "Mac_all_low"))
names(ct) <- unique(sce$cluster)
sce$subclusters <- ct[sce$cluster]
dittoSeq::dittoDimPlot(sce,reduction.use = "UMAP",var = "subclusters")
mean_sce <- aggregateAcrossCells(sce,
ids = sce$subclusters,
statistics = "mean")
assay(mean_sce, "exprs") <- asinh(counts(mean_sce))
colnames(mean_sce) <- mean_sce$subclusters
mean_sce <- mean_sce[,order(mean_sce$celltype)]
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c( "subclusters", "celltype"),
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101))+
coord_flip()
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c( "subclusters", "celltype"),
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101))
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c( "subclusters", "celltype"),
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101),
show_colnames = TRUE)+
coord_flip()
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c( "subclusters", "celltype"),
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101),
show_colnames = TRUE)
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c( "subclusters", "celltype"),
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101),
show_colnames = TRUE)+
coord_flip()
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c( "subclusters", "celltype"),
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101),
show_colnames = TRUE)
pdf(file = "output/Figure_6/subclusters_myeloid_lymphoid_scaled.pdf",width = 15, height=12)
pdf(file = "output/Figure_6/subclusters_myeloid_lymphoid_scaled.pdf",width = 15, height=12)
output_column()
output
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
pdf(file = "output/Figure_6/subclusters_myeloid_lymphoid_scaled.pdf",width = 15, height=12)
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c( "subclusters", "celltype"),
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101),
show_colnames = TRUE)
dev.off()
library(pals)
cell_types <- sort(unique(sce$subclusters))
names(cell_types) <- cell_types
cell_types[grepl("CD8",cell_types)] <- c("darkorchid2","darkorchid4","darkmagenta","darkviolet","magenta4","mediumorchid1")
cell_types[grepl("CD4",cell_types)] <- c("deeppink1","deeppink2","deeppink","magenta", "deeppink3", "magenta2","violetred1")
cell_types[grepl("Mac",cell_types)] <- c("green","green1", "green2", "green3", "chartreuse1", "yellowgreen")
cell_types[grepl("^DC",cell_types)] <- c("green4","darkolivegreen4","chartreuse4","springgreen4","seagreen3" )
cell_types[grepl("GCDC",cell_types)] <- c("lightseagreen")
cell_types[grepl("Tumor",cell_types)] <- c("sienna")
cell_types["B"] <- "red3"
cell_types[grepl("BnT",cell_types)]<- c("indianred")
cell_types[grepl("B_act",cell_types)] <- c("firebrick3")
cell_types["plasma"] <- "goldenrod2"
cell_types["Treg"] <- "hotpink"
cell_types["HLADR"] <- "darkgreen"
cell_types["Neutrophil"] <- "blue1"
cell_types["NK"] <- "yellow"
cell_types["pDC"] <- "cyan4"
cell_types["Mural"] <- "deepskyblue"
cell_types["undefined"] <- "gray"
col_list <- list(CellType = cell_types)
pie(rep(1,length(row_anno$CellType)),col=col_list$CellType, labels = names(col_list$CellType))
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c( "subclusters", "celltype"),
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101),
show_colnames = TRUE,
annotation_col = col_list)
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c( "subclusters", "celltype"),
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101),
show_colnames = TRUE,
annotation_col = list(subcluster == col_list))
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c( "subclusters", "celltype"),
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101),
show_colnames = TRUE,
annotation_col = list(subcluster = col_list))
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c( "subclusters", "celltype"),
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101),
show_colnames = TRUE,
annotation_colors =  = list(subcluster = col_list))
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c( "subclusters", "celltype"),
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101),
show_colnames = TRUE,
annotation_colors =  list(subcluster = col_list))
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c( "subclusters", "celltype"),
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101),
show_colnames = TRUE,
annotation_colors =  list(subclusters = col_list))
col_list
names(col_list) %in% unique(mean_sce$celltype)
names(col_list)
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c( "subclusters", "celltype"),
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101),
show_colnames = TRUE,
annotation_colors =  list(subclusters = col_list$CellType))
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c( "subclusters", "celltype"),
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101),
show_colnames = TRUE,
annotation_colors =  list(subclusters = col_list$CellType,
celltype = metadata(sce)$color_vectors$celltype))
metadata(sce)$color_vectors
metadata(sce)$color_vectors$celltype
library(pals)
cell_types <- sort(unique(sce$subclusters))
names(cell_types) <- cell_types
cell_types[grepl("CD8",cell_types)] <- c("darkorchid2","darkorchid4","darkmagenta","darkviolet","magenta4","mediumorchid1")
cell_types[grepl("CD4",cell_types)] <- c("deeppink1","deeppink2","deeppink","magenta", "deeppink3", "magenta2","violetred1")
cell_types[grepl("Mac",cell_types)] <- c("green","green1", "green2", "green3", "chartreuse1", "yellowgreen")
cell_types[grepl("^DC",cell_types)] <- c("green4","darkolivegreen4","chartreuse4","springgreen4","seagreen3" )
cell_types[grepl("GCDC",cell_types)] <- c("lightseagreen")
cell_types[grepl("Tumor",cell_types)] <- c("sienna")
cell_types["B"] <- "red3"
cell_types[grepl("BnT",cell_types)]<- c("indianred")
cell_types[grepl("B_act",cell_types)] <- c("firebrick3")
cell_types["plasma"] <- "goldenrod2"
cell_types["Treg"] <- "hotpink"
cell_types["HLADR"] <- "darkgreen"
cell_types["Neutrophil"] <- "blue1"
cell_types["NK"] <- "yellow"
cell_types["pDC"] <- "deepskyblue"
cell_types["Mural"] <- "tomato"
cell_types["undefined"] <- "gray"
col_list <- list(CellType = cell_types)
metadata(sce)$color_vectors$celltype
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c( "subclusters", "celltype"),
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101),
show_colnames = TRUE,
annotation_colors =  list(subclusters = col_list$CellType,
celltype = metadata(sce)$color_vectors$celltype))
library(pals)
cell_types <- sort(unique(sce$subclusters))
names(cell_types) <- cell_types
cell_types[grepl("CD8",cell_types)] <- c("darkorchid2","darkorchid4","darkmagenta","darkviolet","magenta4","mediumorchid1")
cell_types[grepl("CD4",cell_types)] <- c("deeppink1","deeppink2","deeppink","magenta", "deeppink3", "magenta2","violetred1")
cell_types[grepl("Mac",cell_types)] <- c("green","green1", "green2", "green3", "chartreuse1", "yellowgreen")
cell_types[grepl("^DC",cell_types)] <- c("green4","darkolivegreen4","chartreuse4","springgreen4","seagreen3" )
cell_types[grepl("GCDC",cell_types)] <- c("lightseagreen")
cell_types[grepl("Tumor",cell_types)] <- c("sienna")
cell_types["B"] <- "red3"
cell_types[grepl("BnT",cell_types)]<- c("indianred")
cell_types[grepl("B_act",cell_types)] <- c("firebrick3")
cell_types["plasma"] <- "goldenrod2"
cell_types["Treg"] <- "hotpink"
cell_types["HLADR"] <- "darkgreen"
cell_types["Neutrophil"] <- "skyblue3"
cell_types["NK"] <- "yellow"
cell_types["pDC"] <- "deepskyblue"
cell_types["Mural"] <- "tomato"
cell_types["undefined"] <- "gray"
col_list <- list(CellType = cell_types)
metadata(sce)$color_vectors$celltype
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c( "subclusters", "celltype"),
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101),
show_colnames = TRUE,
annotation_colors =  list(subclusters = col_list$CellType,
celltype = metadata(sce)$color_vectors$celltype))
library(pals)
cell_types <- sort(unique(sce$subclusters))
names(cell_types) <- cell_types
cell_types[grepl("CD8",cell_types)] <- c("darkorchid2","darkorchid4","darkmagenta","darkviolet","magenta4","mediumorchid1")
cell_types[grepl("CD4",cell_types)] <- c("deeppink1","deeppink2","deeppink","magenta", "deeppink3", "magenta2","violetred1")
cell_types[grepl("Mac",cell_types)] <- c("green","green1", "green2", "green3", "chartreuse1", "yellowgreen")
cell_types[grepl("^DC",cell_types)] <- c("green4","darkolivegreen4","chartreuse4","springgreen4","seagreen3" )
cell_types[grepl("GCDC",cell_types)] <- c("lightseagreen")
cell_types[grepl("Tumor",cell_types)] <- c("sienna4")
cell_types["B"] <- "red3"
cell_types[grepl("BnT",cell_types)]<- c("indianred")
cell_types[grepl("B_act",cell_types)] <- c("firebrick3")
cell_types["plasma"] <- "goldenrod2"
cell_types["Treg"] <- "hotpink"
cell_types["HLADR"] <- "darkgreen"
cell_types["Neutrophil"] <- "skyblue3"
cell_types["NK"] <- "yellow"
cell_types["pDC"] <- "deepskyblue"
cell_types["Mural"] <- "tomato"
cell_types["undefined"] <- "gray"
col_list <- list(CellType = cell_types)
metadata(sce)$color_vectors$celltype
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c( "subclusters", "celltype"),
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101),
show_colnames = TRUE,
annotation_colors =  list(subclusters = col_list$CellType,
celltype = metadata(sce)$color_vectors$celltype))
library(pals)
cell_types <- sort(unique(sce$subclusters))
names(cell_types) <- cell_types
cell_types[grepl("CD8",cell_types)] <- c("darkorchid2","darkorchid4","darkmagenta","darkviolet","magenta4","mediumorchid1")
cell_types[grepl("CD4",cell_types)] <- c("deeppink1","deeppink2","deeppink","magenta", "deeppink3", "magenta2","violetred1")
cell_types[grepl("Mac",cell_types)] <- c("green","green1", "green2", "green3", "chartreuse1", "yellowgreen")
cell_types[grepl("^DC",cell_types)] <- c("green4","darkolivegreen4","chartreuse4","springgreen4","seagreen3" )
cell_types[grepl("GCDC",cell_types)] <- c("lightseagreen")
cell_types[grepl("Tumor",cell_types)] <- c("sienna4")
cell_types["B"] <- "red3"
cell_types[grepl("BnT",cell_types)]<- c("indianred")
cell_types[grepl("B_act",cell_types)] <- c("firebrick3")
cell_types["plasma"] <- "goldenrod2"
cell_types["Treg"] <- "maroon3"
cell_types["HLADR"] <- "darkgreen"
cell_types["Neutrophil"] <- "skyblue3"
cell_types["NK"] <- "yellow"
cell_types["pDC"] <- "deepskyblue"
cell_types["Mural"] <- "tomato"
cell_types["undefined"] <- "gray"
col_list <- list(CellType = cell_types)
metadata(sce)$color_vectors$celltype
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c( "subclusters", "celltype"),
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101),
show_colnames = TRUE,
annotation_colors =  list(subclusters = col_list$CellType,
celltype = metadata(sce)$color_vectors$celltype))
pdf(file = "output/Figure_6/subclusters_myeloid_lymphoid_scaled.pdf",width = 15, height=12)
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c( "subclusters", "celltype"),
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101),
show_colnames = TRUE,
annotation_colors =  list(subclusters = col_list$CellType,
celltype = metadata(sce)$color_vectors$celltype))
dev.off()
pdf(file = "output/Figure_6/subclusters_myeloid_lymphoid.pdf",width = 15, height=12)
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c("cluster", "celltype"),scale = "none",assay = "normalized",
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = viridis(100),
annotation_colors =  list(subclusters = col_list$CellType,
celltype = metadata(sce)$color_vectors$celltype))
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c("cluster", "celltype"),scale = "none",
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = viridis(100),
annotation_colors =  list(subclusters = col_list$CellType,
celltype = metadata(sce)$color_vectors$celltype))
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c("cluster", "celltype"),scale = "none",assay = "exprs",
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = viridis(100),
annotation_colors =  list(subclusters = col_list$CellType,
celltype = metadata(sce)$color_vectors$celltype))
# scaled heatmap
pdf(file = "output/Figure_6/subclusters_myeloid_lymphoid_scaled.pdf",width = 15, height=12)
dittoSeq::dittoHeatmap(mean_sce,
annot.by = c( "subclusters", "celltype"),
genes = rownames(sce)[!grepl("Histone|DNA", rownames(sce))],
heatmap.colors = colorRampPalette(c("dark blue", "white", "dark red"))(100),
breaks = seq(-3, 3, length.out = 101),
show_colnames = TRUE,
annotation_colors =  list(subclusters = col_list$CellType,
celltype = metadata(sce)$color_vectors$celltype))
dev.off()
